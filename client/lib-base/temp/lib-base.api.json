{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.13.1",
    "schemaVersion": 1003,
    "oldestForwardsCompatibleVersion": 1001
  },
  "kind": "Package",
  "canonicalReference": "@liquity/lib-base!",
  "docComment": "",
  "name": "@liquity/lib-base",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@liquity/lib-base!",
      "name": "",
      "members": [
        {
          "kind": "Interface",
          "canonicalReference": "@liquity/lib-base!CollateralGainTransferDetails:interface",
          "docComment": "/**\n * Details of a {@link TransactableLiquity.transferCollateralGainToTrove | transferCollateralGainToTrove()} transaction.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CollateralGainTransferDetails extends "
            },
            {
              "kind": "Reference",
              "text": "StabilityPoolGainsWithdrawalDetails",
              "canonicalReference": "@liquity/lib-base!StabilityPoolGainsWithdrawalDetails:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "CollateralGainTransferDetails",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!CollateralGainTransferDetails#newTrove:member",
              "docComment": "/**\n * New state of the depositor's Trove directly after the transaction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "newTrove: "
                },
                {
                  "kind": "Reference",
                  "text": "Trove",
                  "canonicalReference": "@liquity/lib-base!Trove:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "newTrove",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@liquity/lib-base!CRITICAL_COLLATERAL_RATIO:var",
          "docComment": "/**\n * Total collateral ratio below which recovery mode is triggered.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "CRITICAL_COLLATERAL_RATIO: "
            },
            {
              "kind": "Reference",
              "text": "Decimal",
              "canonicalReference": "@liquity/lib-base!Decimal:class"
            }
          ],
          "releaseTag": "Public",
          "name": "CRITICAL_COLLATERAL_RATIO",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@liquity/lib-base!Decimal:class",
          "docComment": "/**\n * Fixed-point decimal bignumber with 18 digits of precision.\n *\n * @remarks\n *\n * Used by Liquity libraries to precisely represent native currency (e.g. Ether), LUSD and LQTY amounts, as well as derived metrics like collateral ratios.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Decimal "
            }
          ],
          "releaseTag": "Public",
          "name": "Decimal",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Decimal#add:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "add(addend: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "addend",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "add"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Decimal#div:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "div(divider: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "divider",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "div"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Decimal#eq:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eq(that: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "that",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "eq"
            },
            {
              "kind": "Property",
              "canonicalReference": "@liquity/lib-base!Decimal#finite:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get finite(): "
                },
                {
                  "kind": "Content",
                  "text": "this | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "finite",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Decimal.from:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static from(decimalish: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "decimalish",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "from"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Decimal.fromBigNumberString:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromBigNumberString(bigNumberString: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "bigNumberString",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "fromBigNumberString"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Decimal#gt:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gt(that: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "that",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "gt"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Decimal#gte:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gte(that: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "that",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "gte"
            },
            {
              "kind": "Property",
              "canonicalReference": "@liquity/lib-base!Decimal.HALF:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly HALF: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "HALF",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@liquity/lib-base!Decimal#infinite:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get infinite(): "
                },
                {
                  "kind": "Content",
                  "text": "this | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "infinite",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@liquity/lib-base!Decimal.INFINITY:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly INFINITY: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "INFINITY",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@liquity/lib-base!Decimal#isZero:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get isZero(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isZero",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Decimal#lt:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lt(that: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "that",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "lt"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Decimal#lte:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lte(that: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "that",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "lte"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Decimal.max:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static max(a: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "max"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Decimal.min:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static min(a: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "min"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Decimal#mul:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mul(multiplier: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "multiplier",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "mul"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Decimal#mulDiv:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mulDiv(multiplier: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": ", divider: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "multiplier",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "divider",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "mulDiv"
            },
            {
              "kind": "Property",
              "canonicalReference": "@liquity/lib-base!Decimal#nonZero:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get nonZero(): "
                },
                {
                  "kind": "Content",
                  "text": "this | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "nonZero",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@liquity/lib-base!Decimal.ONE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly ONE: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "ONE",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Decimal#pow:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pow(exponent: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "exponent",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "pow"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Decimal#prettify:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "prettify(precision?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "precision",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "prettify"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Decimal#shorten:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shorten(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "shorten"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Decimal#sub:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sub(subtrahend: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "subtrahend",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "sub"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Decimal#toString:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toString(precision?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "precision",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "toString"
            },
            {
              "kind": "Property",
              "canonicalReference": "@liquity/lib-base!Decimal#zero:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get zero(): "
                },
                {
                  "kind": "Content",
                  "text": "this | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "zero",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@liquity/lib-base!Decimal.ZERO:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly ZERO: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "ZERO",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@liquity/lib-base!Decimalish:type",
          "docComment": "/**\n * Types that can be converted into a Decimal.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Decimalish = "
            },
            {
              "kind": "Reference",
              "text": "Decimal",
              "canonicalReference": "@liquity/lib-base!Decimal:class"
            },
            {
              "kind": "Content",
              "text": " | number | string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Decimalish",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@liquity/lib-base!FailedReceipt:type",
          "docComment": "/**\n * Indicates that the transaction has been mined, but it failed.\n *\n * @remarks\n *\n * The `rawReceipt` property is an implementation-specific transaction receipt object.\n *\n * Returned by {@link SentLiquityTransaction.getReceipt} and {@link SentLiquityTransaction.waitForReceipt}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type FailedReceipt<R = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "{\n    status: \"failed\";\n    rawReceipt: R;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "FailedReceipt",
          "typeParameters": [
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@liquity/lib-base!Fees:class",
          "docComment": "/**\n * Calculator for fees.\n *\n * @remarks\n *\n * Returned by the {@link ReadableLiquity.getFees | getFees()} function.\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `Fees` class.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Fees "
            }
          ],
          "releaseTag": "Public",
          "name": "Fees",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Fees#borrowingRate:member(1)",
              "docComment": "/**\n * Calculate the current borrowing rate.\n *\n * @remarks\n *\n * By default, the fee is calculated at the time of the latest block. This can be overridden using the `when` parameter.\n *\n * To calculate the borrowing fee in LUSD, multiply the borrowed LUSD amount by the borrowing rate.\n *\n * @param when - Optional timestamp that can be used to calculate what the borrowing rate would decay to at a point of time in the future.\n *\n * @example\n * ```typescript\n * const fees = await liquity.getFees();\n *\n * const borrowedLUSDAmount = 100;\n * const borrowingRate = fees.borrowingRate();\n * const borrowingFeeLUSD = borrowingRate.mul(borrowedLUSDAmount);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borrowingRate(when?: "
                },
                {
                  "kind": "Reference",
                  "text": "Date",
                  "canonicalReference": "!Date:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "when",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "borrowingRate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Fees#equals:member(1)",
              "docComment": "/**\n * Compare to another instance of `Fees`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "equals(that: "
                },
                {
                  "kind": "Reference",
                  "text": "Fees",
                  "canonicalReference": "@liquity/lib-base!Fees:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "that",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "equals"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Fees#redemptionRate:member(1)",
              "docComment": "/**\n * Calculate the current redemption rate.\n *\n * @remarks\n *\n * By default, the fee is calculated at the time of the latest block. This can be overridden using the `when` parameter.\n *\n * Unlike the borrowing rate, the redemption rate depends on the amount being redeemed. To be more precise, it depends on the fraction of the redeemed amount compared to the total LUSD supply, which must be passed as a parameter.\n *\n * To calculate the redemption fee in LUSD, multiply the redeemed LUSD amount with the redemption rate.\n *\n * @param redeemedFractionOfSupply - The amount of LUSD being redeemed divided by the total supply.\n *\n * @param when - Optional timestamp that can be used to calculate what the redemption rate would decay to at a point of time in the future.\n *\n * @example\n * ```typescript\n * const fees = await liquity.getFees();\n * const total = await liquity.getTotal();\n *\n * const redeemedLUSDAmount = Decimal.from(100);\n * const redeemedFractionOfSupply = redeemedLUSDAmount.div(total.debt);\n * const redemptionRate = fees.redemptionRate(redeemedFractionOfSupply);\n * const redemptionFeeLUSD = redemptionRate.mul(redeemedLUSDAmount);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "redemptionRate(redeemedFractionOfSupply?: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": ", when?: "
                },
                {
                  "kind": "Reference",
                  "text": "Date",
                  "canonicalReference": "!Date:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "redeemedFractionOfSupply",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "when",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "redemptionRate"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@liquity/lib-base!FrontendStatus:type",
          "docComment": "/**\n * Represents whether an address has been registered as a Liquity frontend.\n *\n * @remarks\n *\n * Returned by the {@link ReadableLiquity.getFrontendStatus | getFrontendStatus()} function.\n *\n * When `status` is `\"registered\"`, `kickbackRate` gives the frontend's kickback rate as a {@link Decimal} between 0 and 1.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type FrontendStatus = "
            },
            {
              "kind": "Content",
              "text": "{\n    status: \"unregistered\";\n} | {\n    status: \"registered\";\n    kickbackRate: "
            },
            {
              "kind": "Reference",
              "text": "Decimal",
              "canonicalReference": "@liquity/lib-base!Decimal:class"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "FrontendStatus",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@liquity/lib-base!LiquidationDetails:interface",
          "docComment": "/**\n * Details of a {@link TransactableLiquity.liquidate | liquidate()} or {@link TransactableLiquity.liquidateUpTo | liquidateUpTo()} transaction.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface LiquidationDetails "
            }
          ],
          "releaseTag": "Public",
          "name": "LiquidationDetails",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!LiquidationDetails#collateralGasCompensation:member",
              "docComment": "/**\n * Amount of native currency (e.g. Ether) paid to the liquidator as gas compensation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "collateralGasCompensation: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "collateralGasCompensation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!LiquidationDetails#liquidatedAddresses:member",
              "docComment": "/**\n * Addresses whose Troves were liquidated by the transaction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "liquidatedAddresses: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "liquidatedAddresses",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!LiquidationDetails#lusdGasCompensation:member",
              "docComment": "/**\n * Amount of LUSD paid to the liquidator as gas compensation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lusdGasCompensation: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "lusdGasCompensation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!LiquidationDetails#totalLiquidated:member",
              "docComment": "/**\n * Total collateral liquidated and debt cleared by the transaction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "totalLiquidated: "
                },
                {
                  "kind": "Reference",
                  "text": "Trove",
                  "canonicalReference": "@liquity/lib-base!Trove:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "totalLiquidated",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@liquity/lib-base!LiquityReceipt:type",
          "docComment": "/**\n * One of either a {@link PendingReceipt}, a {@link FailedReceipt} or a {@link SuccessfulReceipt}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type LiquityReceipt<R = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ", D = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "PendingReceipt",
              "canonicalReference": "@liquity/lib-base!PendingReceipt:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "MinedReceipt",
              "canonicalReference": "@liquity/lib-base!MinedReceipt:type"
            },
            {
              "kind": "Content",
              "text": "<R, D>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "LiquityReceipt",
          "typeParameters": [
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "typeParameterName": "D",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@liquity/lib-base!LiquityStore:class",
          "docComment": "/**\n * Abstract base class of Liquity data store implementations.\n *\n * @remarks\n *\n * The type parameter `T` may be used to type extra state added to {@link LiquityStoreState} by the subclass.\n *\n * Implemented by {@link @liquity/lib-ethers#BlockPolledLiquityStore}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class LiquityStore<T = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "LiquityStore",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@liquity/lib-base!LiquityStore#logging:member",
              "docComment": "/**\n * Turn console logging on/off.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "logging: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "logging",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@liquity/lib-base!LiquityStore#onLoaded:member",
              "docComment": "/**\n * Called after the state is fetched for the first time.\n *\n * @remarks\n *\n * See {@link LiquityStore.start | start()}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onLoaded?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "onLoaded",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!LiquityStore#start:member(1)",
              "docComment": "/**\n * Start monitoring the blockchain for Liquity state changes.\n *\n * @remarks\n *\n * The {@link LiquityStore.onLoaded | onLoaded} callback will be called after the state is fetched for the first time.\n *\n * Use the {@link LiquityStore.subscribe | subscribe()} function to register listeners.\n *\n * @returns Function to stop the monitoring.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "start(): "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "start"
            },
            {
              "kind": "Property",
              "canonicalReference": "@liquity/lib-base!LiquityStore#state:member",
              "docComment": "/**\n * The current store state.\n *\n * @remarks\n *\n * Should not be accessed before the store is loaded. Assign a function to {@link LiquityStore.onLoaded | onLoaded} to get a callback when this happens.\n *\n * See {@link LiquityStoreState} for the list of properties returned.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get state(): "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityStoreState",
                  "canonicalReference": "@liquity/lib-base!LiquityStoreState:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "state",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!LiquityStore#subscribe:member(1)",
              "docComment": "/**\n * Register a state change listener.\n *\n * @param listener - Function that will be called whenever state changes.\n *\n * @returns Function to unregister this listener.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subscribe(listener: "
                },
                {
                  "kind": "Content",
                  "text": "(params: "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityStoreListenerParams",
                  "canonicalReference": "@liquity/lib-base!LiquityStoreListenerParams:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>) => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "subscribe"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@liquity/lib-base!LiquityStoreBaseState:interface",
          "docComment": "/**\n * State variables read from the blockchain.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface LiquityStoreBaseState "
            }
          ],
          "releaseTag": "Public",
          "name": "LiquityStoreBaseState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!LiquityStoreBaseState#accountBalance:member",
              "docComment": "/**\n * User's native currency balance (e.g. Ether).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accountBalance: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "accountBalance",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!LiquityStoreBaseState#collateralSurplusBalance:member",
              "docComment": "/**\n * Amount of leftover collateral available for withdrawal to the user.\n *\n * @remarks\n *\n * See {@link ReadableLiquity.getCollateralSurplusBalance | getCollateralSurplusBalance()} for more information.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "collateralSurplusBalance: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "collateralSurplusBalance",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!LiquityStoreBaseState#frontend:member",
              "docComment": "/**\n * Status of currently used frontend.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "frontend: "
                },
                {
                  "kind": "Reference",
                  "text": "FrontendStatus",
                  "canonicalReference": "@liquity/lib-base!FrontendStatus:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "frontend",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!LiquityStoreBaseState#lqtyBalance:member",
              "docComment": "/**\n * User's LQTY token balance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lqtyBalance: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "lqtyBalance",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!LiquityStoreBaseState#lqtyStake:member",
              "docComment": "/**\n * User's LQTY stake.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lqtyStake: "
                },
                {
                  "kind": "Reference",
                  "text": "LQTYStake",
                  "canonicalReference": "@liquity/lib-base!LQTYStake:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "lqtyStake",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!LiquityStoreBaseState#lusdBalance:member",
              "docComment": "/**\n * User's LUSD token balance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lusdBalance: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "lusdBalance",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!LiquityStoreBaseState#lusdInStabilityPool:member",
              "docComment": "/**\n * Total amount of LUSD currently deposited in the Stability Pool.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lusdInStabilityPool: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "lusdInStabilityPool",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!LiquityStoreBaseState#numberOfTroves:member",
              "docComment": "/**\n * Number of Troves that are currently open.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "numberOfTroves: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "numberOfTroves",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!LiquityStoreBaseState#ownFrontend:member",
              "docComment": "/**\n * Status of user's own frontend.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ownFrontend: "
                },
                {
                  "kind": "Reference",
                  "text": "FrontendStatus",
                  "canonicalReference": "@liquity/lib-base!FrontendStatus:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "ownFrontend",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!LiquityStoreBaseState#price:member",
              "docComment": "/**\n * Current price of the native currency (e.g. Ether) in USD.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "price: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "price",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!LiquityStoreBaseState#stabilityDeposit:member",
              "docComment": "/**\n * User's stability deposit.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stabilityDeposit: "
                },
                {
                  "kind": "Reference",
                  "text": "StabilityDeposit",
                  "canonicalReference": "@liquity/lib-base!StabilityDeposit:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "stabilityDeposit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!LiquityStoreBaseState#total:member",
              "docComment": "/**\n * Total collateral and debt in the Liquity system.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "total: "
                },
                {
                  "kind": "Reference",
                  "text": "Trove",
                  "canonicalReference": "@liquity/lib-base!Trove:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "total",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!LiquityStoreBaseState#totalRedistributed:member",
              "docComment": "/**\n * Total collateral and debt per stake that has been liquidated through redistribution.\n *\n * @remarks\n *\n * Needed when dealing with instances of {@link TroveWithPendingRedistribution}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "totalRedistributed: "
                },
                {
                  "kind": "Reference",
                  "text": "Trove",
                  "canonicalReference": "@liquity/lib-base!Trove:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "totalRedistributed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!LiquityStoreBaseState#totalStakedLQTY:member",
              "docComment": "/**\n * Total amount of LQTY currently staked.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "totalStakedLQTY: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "totalStakedLQTY",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!LiquityStoreBaseState#troveBeforeRedistribution:member",
              "docComment": "/**\n * User's Trove in its state after the last direct modification.\n *\n * @remarks\n *\n * The current state of the user's Trove can be found as {@link LiquityStoreDerivedState.trove | trove}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "troveBeforeRedistribution: "
                },
                {
                  "kind": "Reference",
                  "text": "TroveWithPendingRedistribution",
                  "canonicalReference": "@liquity/lib-base!TroveWithPendingRedistribution:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "troveBeforeRedistribution",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@liquity/lib-base!LiquityStoreDerivedState:interface",
          "docComment": "/**\n * State variables derived from {@link LiquityStoreBaseState}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface LiquityStoreDerivedState "
            }
          ],
          "releaseTag": "Public",
          "name": "LiquityStoreDerivedState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!LiquityStoreDerivedState#borrowingRate:member",
              "docComment": "/**\n * Current borrowing rate.\n *\n * @remarks\n *\n * A value between 0 and 1.\n *\n * @example\n *\n * For example a value of 0.01 amounts to a borrowing fee of 1% of the borrowed amount.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borrowingRate: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "borrowingRate",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!LiquityStoreDerivedState#fees:member",
              "docComment": "/**\n * Calculator for current fees.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fees: "
                },
                {
                  "kind": "Reference",
                  "text": "Fees",
                  "canonicalReference": "@liquity/lib-base!Fees:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "fees",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!LiquityStoreDerivedState#haveUndercollateralizedTroves:member",
              "docComment": "/**\n * Whether there are any Troves with collateral ratio below the {@link MINIMUM_COLLATERAL_RATIO | minimum}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "haveUndercollateralizedTroves: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "haveUndercollateralizedTroves",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!LiquityStoreDerivedState#redemptionRate:member",
              "docComment": "/**\n * Current redemption rate.\n *\n * @remarks\n *\n * Note that the actual rate paid by a redemption transaction will depend on the amount of LUSD being redeemed.\n *\n * Use {@link Fees.redemptionRate} to calculate a precise redemption rate.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "redemptionRate: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "redemptionRate",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!LiquityStoreDerivedState#trove:member",
              "docComment": "/**\n * Current state of user's Trove\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "trove: "
                },
                {
                  "kind": "Reference",
                  "text": "UserTrove",
                  "canonicalReference": "@liquity/lib-base!UserTrove:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "trove",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@liquity/lib-base!LiquityStoreListenerParams:interface",
          "docComment": "/**\n * Parameters passed to {@link LiquityStore} listeners.\n *\n * @remarks\n *\n * Use the {@link LiquityStore.subscribe | subscribe()} function to register a listener.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface LiquityStoreListenerParams<T = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "LiquityStoreListenerParams",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!LiquityStoreListenerParams#newState:member",
              "docComment": "/**\n * The entire previous state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "newState: "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityStoreState",
                  "canonicalReference": "@liquity/lib-base!LiquityStoreState:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "newState",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!LiquityStoreListenerParams#oldState:member",
              "docComment": "/**\n * The entire new state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "oldState: "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityStoreState",
                  "canonicalReference": "@liquity/lib-base!LiquityStoreState:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "oldState",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!LiquityStoreListenerParams#stateChange:member",
              "docComment": "/**\n * Only the state variables that have changed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stateChange: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "LiquityStoreState",
                  "canonicalReference": "@liquity/lib-base!LiquityStoreState:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "stateChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@liquity/lib-base!LiquityStoreState:type",
          "docComment": "/**\n * Type of {@link LiquityStore}'s {@link LiquityStore.state | state}.\n *\n * @remarks\n *\n * It combines all properties of {@link LiquityStoreBaseState} and {@link LiquityStoreDerivedState} with optional extra state added by the particular `LiquityStore` implementation.\n *\n * The type parameter `T` may be used to type the extra state.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type LiquityStoreState<T = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "LiquityStoreBaseState",
              "canonicalReference": "@liquity/lib-base!LiquityStoreBaseState:interface"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "LiquityStoreDerivedState",
              "canonicalReference": "@liquity/lib-base!LiquityStoreDerivedState:interface"
            },
            {
              "kind": "Content",
              "text": " & T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "LiquityStoreState",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@liquity/lib-base!LQTYStake:class",
          "docComment": "/**\n * Represents a user's LQTY stake and accrued gains.\n *\n * @remarks\n *\n * Returned by the {@link ReadableLiquity.getLQTYStake | getLQTYStake()} function.\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `LQTYStake` class.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class LQTYStake "
            }
          ],
          "releaseTag": "Public",
          "name": "LQTYStake",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!LQTYStake#apply:member(1)",
              "docComment": "/**\n * Apply a {@link LQTYStakeChange} to this `LQTYStake`.\n *\n * @returns The new staked LQTY amount.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "apply(change: "
                },
                {
                  "kind": "Reference",
                  "text": "LQTYStakeChange",
                  "canonicalReference": "@liquity/lib-base!LQTYStakeChange:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "> | undefined"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "change",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                }
              ],
              "name": "apply"
            },
            {
              "kind": "Property",
              "canonicalReference": "@liquity/lib-base!LQTYStake#collateralGain:member",
              "docComment": "/**\n * Collateral gain available to withdraw.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly collateralGain: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "collateralGain",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!LQTYStake#equals:member(1)",
              "docComment": "/**\n * Compare to another instance of `LQTYStake`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "equals(that: "
                },
                {
                  "kind": "Reference",
                  "text": "LQTYStake",
                  "canonicalReference": "@liquity/lib-base!LQTYStake:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "that",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "equals"
            },
            {
              "kind": "Property",
              "canonicalReference": "@liquity/lib-base!LQTYStake#isEmpty:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get isEmpty(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isEmpty",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@liquity/lib-base!LQTYStake#lusdGain:member",
              "docComment": "/**\n * LUSD gain available to withdraw.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly lusdGain: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "lusdGain",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@liquity/lib-base!LQTYStake#stakedLQTY:member",
              "docComment": "/**\n * The amount of LQTY that's staked.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly stakedLQTY: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "stakedLQTY",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!LQTYStake#whatChanged:member(1)",
              "docComment": "/**\n * Calculate the difference between this `LQTYStake` and `thatStakedLQTY`.\n *\n * @returns An object representing the change, or `undefined` if the staked amounts are equal.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "whatChanged(thatStakedLQTY: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "LQTYStakeChange",
                  "canonicalReference": "@liquity/lib-base!LQTYStakeChange:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": "> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "thatStakedLQTY",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "whatChanged"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@liquity/lib-base!LQTYStakeChange:type",
          "docComment": "/**\n * Represents the change between two states of an LQTY Stake.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type LQTYStakeChange<T> = "
            },
            {
              "kind": "Content",
              "text": "{\n    stakeLQTY: T;\n    unstakeLQTY?: undefined;\n} | {\n    stakeLQTY?: undefined;\n    unstakeLQTY: T;\n    unstakeAllLQTY: boolean;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "LQTYStakeChange",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@liquity/lib-base!LUSD_LIQUIDATION_RESERVE:var",
          "docComment": "/**\n * Amount of LUSD that's reserved for compensating the liquidator of a Trove.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LUSD_LIQUIDATION_RESERVE: "
            },
            {
              "kind": "Reference",
              "text": "Decimal",
              "canonicalReference": "@liquity/lib-base!Decimal:class"
            }
          ],
          "releaseTag": "Public",
          "name": "LUSD_LIQUIDATION_RESERVE",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@liquity/lib-base!LUSD_MINIMUM_DEBT:var",
          "docComment": "/**\n * A Trove must always have at least this much debt.\n *\n * @remarks\n *\n * Any transaction that would result in a Trove with less debt than this will be reverted.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LUSD_MINIMUM_DEBT: "
            },
            {
              "kind": "Reference",
              "text": "Decimal",
              "canonicalReference": "@liquity/lib-base!Decimal:class"
            }
          ],
          "releaseTag": "Public",
          "name": "LUSD_MINIMUM_DEBT",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@liquity/lib-base!LUSD_MINIMUM_NET_DEBT:var",
          "docComment": "/**\n * A Trove must always have at least this much debt on top of the {@link LUSD_LIQUIDATION_RESERVE | liquidation reserve}.\n *\n * @remarks\n *\n * Any transaction that would result in a Trove with less net debt than this will be reverted.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "LUSD_MINIMUM_NET_DEBT: "
            },
            {
              "kind": "Reference",
              "text": "Decimal",
              "canonicalReference": "@liquity/lib-base!Decimal:class"
            }
          ],
          "releaseTag": "Public",
          "name": "LUSD_MINIMUM_NET_DEBT",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@liquity/lib-base!MAXIMUM_BORROWING_RATE:var",
          "docComment": "/**\n * Value that the {@link Fees.borrowingRate | borrowing rate} will never exceed.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MAXIMUM_BORROWING_RATE: "
            },
            {
              "kind": "Reference",
              "text": "Decimal",
              "canonicalReference": "@liquity/lib-base!Decimal:class"
            }
          ],
          "releaseTag": "Public",
          "name": "MAXIMUM_BORROWING_RATE",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@liquity/lib-base!MinedReceipt:type",
          "docComment": "/**\n * Either a {@link FailedReceipt} or a {@link SuccessfulReceipt}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type MinedReceipt<R = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ", D = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "FailedReceipt",
              "canonicalReference": "@liquity/lib-base!FailedReceipt:type"
            },
            {
              "kind": "Content",
              "text": "<R> | "
            },
            {
              "kind": "Reference",
              "text": "SuccessfulReceipt",
              "canonicalReference": "@liquity/lib-base!SuccessfulReceipt:type"
            },
            {
              "kind": "Content",
              "text": "<R, D>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "MinedReceipt",
          "typeParameters": [
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "typeParameterName": "D",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@liquity/lib-base!MINIMUM_BORROWING_RATE:var",
          "docComment": "/**\n * Value that the {@link Fees.borrowingRate | borrowing rate} will never decay below.\n *\n * @remarks\n *\n * Note that the borrowing rate can still be lower than this during recovery mode, when it's overridden by zero.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MINIMUM_BORROWING_RATE: "
            },
            {
              "kind": "Reference",
              "text": "Decimal",
              "canonicalReference": "@liquity/lib-base!Decimal:class"
            }
          ],
          "releaseTag": "Public",
          "name": "MINIMUM_BORROWING_RATE",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@liquity/lib-base!MINIMUM_COLLATERAL_RATIO:var",
          "docComment": "/**\n * Collateral ratio below which a Trove can be liquidated in normal mode.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MINIMUM_COLLATERAL_RATIO: "
            },
            {
              "kind": "Reference",
              "text": "Decimal",
              "canonicalReference": "@liquity/lib-base!Decimal:class"
            }
          ],
          "releaseTag": "Public",
          "name": "MINIMUM_COLLATERAL_RATIO",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@liquity/lib-base!MINIMUM_REDEMPTION_RATE:var",
          "docComment": "/**\n * Value that the {@link Fees.redemptionRate | redemption rate} will never decay below.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "MINIMUM_REDEMPTION_RATE: "
            },
            {
              "kind": "Reference",
              "text": "Decimal",
              "canonicalReference": "@liquity/lib-base!Decimal:class"
            }
          ],
          "releaseTag": "Public",
          "name": "MINIMUM_REDEMPTION_RATE",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@liquity/lib-base!PendingReceipt:type",
          "docComment": "/**\n * Indicates that the transaction hasn't been mined yet.\n *\n * @remarks\n *\n * Returned by {@link SentLiquityTransaction.getReceipt}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type PendingReceipt = "
            },
            {
              "kind": "Content",
              "text": "{\n    status: \"pending\";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "PendingReceipt",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@liquity/lib-base!PopulatableLiquity:interface",
          "docComment": "/**\n * Prepare Liquity transactions for sending.\n *\n * @remarks\n *\n * The functions return an object implementing {@link PopulatedLiquityTransaction}, which can be used to send the transaction and get a {@link SentLiquityTransaction}.\n *\n * Implemented by {@link @liquity/lib-ethers#PopulatableEthersLiquity}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PopulatableLiquity<R = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ", S = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ", P = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "_PopulatableFrom",
              "canonicalReference": "@liquity/lib-base!_PopulatableFrom:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SendableLiquity",
              "canonicalReference": "@liquity/lib-base!SendableLiquity:interface"
            },
            {
              "kind": "Content",
              "text": "<R, S>, P> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "typeParameterName": "S",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "typeParameterName": "P",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "PopulatableLiquity",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!PopulatableLiquity#adjustTrove:member(1)",
              "docComment": "/**\n * Adjust existing Trove by changing its collateral, debt, or both.\n *\n * @remarks\n *\n * The transaction will fail if the Trove's debt would fall below {@link @liquity/lib-base#LUSD_MINIMUM_DEBT}.\n *\n * If `maxBorrowingRate` is omitted, the current borrowing rate plus 0.5% is used as maximum acceptable rate.\n *\n * @param params - Parameters of the adjustment.\n *\n * @param maxBorrowingRate - Maximum acceptable {@link @liquity/lib-base#Fees.borrowingRate | borrowing rate} if `params` includes `borrowLUSD`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "adjustTrove(params: "
                },
                {
                  "kind": "Reference",
                  "text": "TroveAdjustmentParams",
                  "canonicalReference": "@liquity/lib-base!TroveAdjustmentParams:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ", maxBorrowingRate?: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PopulatedLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!PopulatedLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<P, "
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, "
                },
                {
                  "kind": "Reference",
                  "text": "TroveAdjustmentDetails",
                  "canonicalReference": "@liquity/lib-base!TroveAdjustmentDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 18
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "params",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "maxBorrowingRate",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "adjustTrove"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!PopulatableLiquity#borrowLUSD:member(1)",
              "docComment": "/**\n * Adjust existing Trove by borrowing more LUSD.\n *\n * @remarks\n *\n * Equivalent to:\n * ```typescript\n * adjustTrove({ borrowLUSD: amount }, maxBorrowingRate)\n * ```\n *\n * @param amount - The amount of LUSD to borrow.\n *\n * @param maxBorrowingRate - Maximum acceptable {@link @liquity/lib-base#Fees.borrowingRate | borrowing rate}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borrowLUSD(amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": ", maxBorrowingRate?: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PopulatedLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!PopulatedLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<P, "
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, "
                },
                {
                  "kind": "Reference",
                  "text": "TroveAdjustmentDetails",
                  "canonicalReference": "@liquity/lib-base!TroveAdjustmentDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 15
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "maxBorrowingRate",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "borrowLUSD"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!PopulatableLiquity#claimCollateralSurplus:member(1)",
              "docComment": "/**\n * Claim leftover collateral after a liquidation or redemption.\n *\n * @remarks\n *\n * Use {@link @liquity/lib-base#ReadableLiquity.getCollateralSurplusBalance | getCollateralSurplusBalance()} to check the amount of collateral available for withdrawal.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "claimCollateralSurplus(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PopulatedLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!PopulatedLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<P, "
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, void>>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "claimCollateralSurplus"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!PopulatableLiquity#closeTrove:member(1)",
              "docComment": "/**\n * Close existing Trove by repaying all debt and withdrawing all collateral.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "closeTrove(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PopulatedLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!PopulatedLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<P, "
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, "
                },
                {
                  "kind": "Reference",
                  "text": "TroveClosureDetails",
                  "canonicalReference": "@liquity/lib-base!TroveClosureDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "closeTrove"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!PopulatableLiquity#depositCollateral:member(1)",
              "docComment": "/**\n * Adjust existing Trove by depositing more collateral.\n *\n * @remarks\n *\n * Equivalent to:\n * ```typescript\n * adjustTrove({ depositCollateral: amount })\n * ```\n *\n * @param amount - The amount of collateral to add to the Trove's existing collateral.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "depositCollateral(amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PopulatedLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!PopulatedLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<P, "
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, "
                },
                {
                  "kind": "Reference",
                  "text": "TroveAdjustmentDetails",
                  "canonicalReference": "@liquity/lib-base!TroveAdjustmentDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "depositCollateral"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!PopulatableLiquity#depositLUSDInStabilityPool:member(1)",
              "docComment": "/**\n * Make a new Stability Deposit, or top up existing one.\n *\n * @remarks\n *\n * The `frontendTag` parameter is only effective when making a new deposit.\n *\n * As a side-effect, the transaction will also pay out an existing Stability Deposit's {@link @liquity/lib-base#StabilityDeposit.collateralGain | collateral gain} and {@link @liquity/lib-base#StabilityDeposit.lqtyReward | LQTY reward}.\n *\n * @param amount - Amount of LUSD to add to new or existing deposit.\n *\n * @param frontendTag - Address that should receive a share of this deposit's LQTY rewards.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "depositLUSDInStabilityPool(amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": ", frontendTag?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PopulatedLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!PopulatedLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<P, "
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, "
                },
                {
                  "kind": "Reference",
                  "text": "StabilityDepositChangeDetails",
                  "canonicalReference": "@liquity/lib-base!StabilityDepositChangeDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 15
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "frontendTag",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "depositLUSDInStabilityPool"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!PopulatableLiquity#liquidate:member(1)",
              "docComment": "/**\n * Liquidate one or more undercollateralized Troves.\n *\n * @param address - Address or array of addresses whose Troves to liquidate.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "liquidate(address: "
                },
                {
                  "kind": "Content",
                  "text": "string | string[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PopulatedLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!PopulatedLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<P, "
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquidationDetails",
                  "canonicalReference": "@liquity/lib-base!LiquidationDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "liquidate"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!PopulatableLiquity#liquidateUpTo:member(1)",
              "docComment": "/**\n * Liquidate the least collateralized Troves up to a maximum number.\n *\n * @param maximumNumberOfTrovesToLiquidate - Stop after liquidating this many Troves.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "liquidateUpTo(maximumNumberOfTrovesToLiquidate: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PopulatedLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!PopulatedLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<P, "
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquidationDetails",
                  "canonicalReference": "@liquity/lib-base!LiquidationDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "maximumNumberOfTrovesToLiquidate",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "liquidateUpTo"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!PopulatableLiquity#openTrove:member(1)",
              "docComment": "/**\n * Open a new Trove by depositing collateral and borrowing LUSD.\n *\n * @remarks\n *\n * If `maxBorrowingRate` is omitted, the current borrowing rate plus 0.5% is used as maximum acceptable rate.\n *\n * @param params - How much to deposit and borrow.\n *\n * @param maxBorrowingRate - Maximum acceptable {@link @liquity/lib-base#Fees.borrowingRate | borrowing rate}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "openTrove(params: "
                },
                {
                  "kind": "Reference",
                  "text": "TroveCreationParams",
                  "canonicalReference": "@liquity/lib-base!TroveCreationParams:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ", maxBorrowingRate?: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PopulatedLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!PopulatedLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<P, "
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, "
                },
                {
                  "kind": "Reference",
                  "text": "TroveCreationDetails",
                  "canonicalReference": "@liquity/lib-base!TroveCreationDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 18
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "params",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "maxBorrowingRate",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "openTrove"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!PopulatableLiquity#redeemLUSD:member(1)",
              "docComment": "/**\n * Redeem LUSD to native currency (e.g. Ether) at face value.\n *\n * @remarks\n *\n * If `maxRedemptionRate` is omitted, the current redemption rate (based on `amount`) plus 0.1% is used as maximum acceptable rate.\n *\n * @param amount - Amount of LUSD to be redeemed.\n *\n * @param maxRedemptionRate - Maximum acceptable {@link @liquity/lib-base#Fees.redemptionRate | redemption rate}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "redeemLUSD(amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": ", maxRedemptionRate?: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PopulatedRedemption",
                  "canonicalReference": "@liquity/lib-base!PopulatedRedemption:interface"
                },
                {
                  "kind": "Content",
                  "text": "<P, S, R>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "maxRedemptionRate",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "redeemLUSD"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!PopulatableLiquity#registerFrontend:member(1)",
              "docComment": "/**\n * Register current wallet address as a Liquity frontend.\n *\n * @param kickbackRate - The portion of LQTY rewards to pass onto users of the frontend (between 0 and 1).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "registerFrontend(kickbackRate: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PopulatedLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!PopulatedLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<P, "
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, void>>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "kickbackRate",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "registerFrontend"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!PopulatableLiquity#repayLUSD:member(1)",
              "docComment": "/**\n * Adjust existing Trove by repaying some of its debt.\n *\n * @remarks\n *\n * Equivalent to:\n * ```typescript\n * adjustTrove({ repayLUSD: amount })\n * ```\n *\n * @param amount - The amount of LUSD to repay.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "repayLUSD(amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PopulatedLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!PopulatedLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<P, "
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, "
                },
                {
                  "kind": "Reference",
                  "text": "TroveAdjustmentDetails",
                  "canonicalReference": "@liquity/lib-base!TroveAdjustmentDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "repayLUSD"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!PopulatableLiquity#sendLQTY:member(1)",
              "docComment": "/**\n * Send LQTY tokens to an address.\n *\n * @param toAddress - Address of receipient.\n *\n * @param amount - Amount of LQTY to send.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sendLQTY(toAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PopulatedLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!PopulatedLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<P, "
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, void>>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "toAddress",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "sendLQTY"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!PopulatableLiquity#sendLUSD:member(1)",
              "docComment": "/**\n * Send LUSD tokens to an address.\n *\n * @param toAddress - Address of receipient.\n *\n * @param amount - Amount of LUSD to send.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sendLUSD(toAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PopulatedLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!PopulatedLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<P, "
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, void>>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "toAddress",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "sendLUSD"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!PopulatableLiquity#stakeLQTY:member(1)",
              "docComment": "/**\n * Stake LQTY to start earning fee revenue or increase existing stake.\n *\n * @remarks\n *\n * As a side-effect, the transaction will also pay out an existing LQTY stake's {@link @liquity/lib-base#LQTYStake.collateralGain | collateral gain} and {@link @liquity/lib-base#LQTYStake.lusdGain | LUSD gain}.\n *\n * @param amount - Amount of LQTY to add to new or existing stake.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stakeLQTY(amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PopulatedLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!PopulatedLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<P, "
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, void>>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "stakeLQTY"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!PopulatableLiquity#transferCollateralGainToTrove:member(1)",
              "docComment": "/**\n * Transfer {@link @liquity/lib-base#StabilityDeposit.collateralGain | collateral gain} from Stability Deposit to Trove.\n *\n * @remarks\n *\n * The collateral gain is transfered to the Trove as additional collateral.\n *\n * As a side-effect, the transaction will also pay out the Stability Deposit's {@link @liquity/lib-base#StabilityDeposit.lqtyReward | LQTY reward}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transferCollateralGainToTrove(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PopulatedLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!PopulatedLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<P, "
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, "
                },
                {
                  "kind": "Reference",
                  "text": "CollateralGainTransferDetails",
                  "canonicalReference": "@liquity/lib-base!CollateralGainTransferDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "transferCollateralGainToTrove"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!PopulatableLiquity#unstakeLQTY:member(1)",
              "docComment": "/**\n * Withdraw LQTY from staking.\n *\n * @remarks\n *\n * As a side-effect, the transaction will also pay out the LQTY stake's {@link @liquity/lib-base#LQTYStake.collateralGain | collateral gain} and {@link @liquity/lib-base#LQTYStake.lusdGain | LUSD gain}.\n *\n * @param amount - Amount of LQTY to withdraw.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unstakeLQTY(amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PopulatedLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!PopulatedLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<P, "
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, void>>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "unstakeLQTY"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!PopulatableLiquity#withdrawCollateral:member(1)",
              "docComment": "/**\n * Adjust existing Trove by withdrawing some of its collateral.\n *\n * @remarks\n *\n * Equivalent to:\n * ```typescript\n * adjustTrove({ withdrawCollateral: amount })\n * ```\n *\n * @param amount - The amount of collateral to withdraw from the Trove.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "withdrawCollateral(amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PopulatedLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!PopulatedLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<P, "
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, "
                },
                {
                  "kind": "Reference",
                  "text": "TroveAdjustmentDetails",
                  "canonicalReference": "@liquity/lib-base!TroveAdjustmentDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "withdrawCollateral"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!PopulatableLiquity#withdrawGainsFromStabilityPool:member(1)",
              "docComment": "/**\n * Withdraw {@link @liquity/lib-base#StabilityDeposit.collateralGain | collateral gain} and {@link @liquity/lib-base#StabilityDeposit.lqtyReward | LQTY reward} from Stability Deposit.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "withdrawGainsFromStabilityPool(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PopulatedLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!PopulatedLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<P, "
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, "
                },
                {
                  "kind": "Reference",
                  "text": "StabilityPoolGainsWithdrawalDetails",
                  "canonicalReference": "@liquity/lib-base!StabilityPoolGainsWithdrawalDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "withdrawGainsFromStabilityPool"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!PopulatableLiquity#withdrawGainsFromStaking:member(1)",
              "docComment": "/**\n * Withdraw {@link @liquity/lib-base#LQTYStake.collateralGain | collateral gain} and {@link @liquity/lib-base#LQTYStake.lusdGain | LUSD gain} from LQTY stake.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "withdrawGainsFromStaking(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PopulatedLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!PopulatedLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<P, "
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, void>>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "withdrawGainsFromStaking"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!PopulatableLiquity#withdrawLUSDFromStabilityPool:member(1)",
              "docComment": "/**\n * Withdraw LUSD from Stability Deposit.\n *\n * @remarks\n *\n * As a side-effect, the transaction will also pay out the Stability Deposit's {@link @liquity/lib-base#StabilityDeposit.collateralGain | collateral gain} and {@link @liquity/lib-base#StabilityDeposit.lqtyReward | LQTY reward}.\n *\n * @param amount - Amount of LUSD to withdraw.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "withdrawLUSDFromStabilityPool(amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PopulatedLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!PopulatedLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<P, "
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, "
                },
                {
                  "kind": "Reference",
                  "text": "StabilityDepositChangeDetails",
                  "canonicalReference": "@liquity/lib-base!StabilityDepositChangeDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "withdrawLUSDFromStabilityPool"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 7,
              "endIndex": 11
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@liquity/lib-base!PopulatedLiquityTransaction:interface",
          "docComment": "/**\n * A transaction that has been prepared for sending.\n *\n * @remarks\n *\n * Implemented by {@link @liquity/lib-ethers#PopulatedEthersLiquityTransaction}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PopulatedLiquityTransaction<P = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ", T extends "
            },
            {
              "kind": "Reference",
              "text": "SentLiquityTransaction",
              "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
            },
            {
              "kind": "Content",
              "text": " "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "SentLiquityTransaction",
              "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "P",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "name": "PopulatedLiquityTransaction",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!PopulatedLiquityTransaction#rawPopulatedTransaction:member",
              "docComment": "/**\n * Implementation-specific populated transaction object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly rawPopulatedTransaction: "
                },
                {
                  "kind": "Content",
                  "text": "P"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rawPopulatedTransaction",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!PopulatedLiquityTransaction#send:member(1)",
              "docComment": "/**\n * Send the transaction.\n *\n * @returns An object that implements {@link @liquity/lib-base#SentLiquityTransaction}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "send(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "send"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@liquity/lib-base!PopulatedRedemption:interface",
          "docComment": "/**\n * A redemption transaction that has been prepared for sending.\n *\n * @remarks\n *\n * The Liquity protocol fulfills redemptions by repaying the debt of Troves in ascending order of their collateralization ratio, and taking a portion of their collateral in exchange. Due to the {@link @liquity/lib-base#LUSD_MINIMUM_DEBT | minimum debt} requirement that Troves must fulfill, some LUSD amounts are not possible to redeem exactly.\n *\n * When {@link @liquity/lib-base#PopulatableLiquity.redeemLUSD | redeemLUSD()} is called with an amount that can't be fully redeemed, the amount will be truncated (see the `redeemableLUSDAmount` property). When this happens, the redeemer can either redeem the truncated amount by sending the transaction unchanged, or prepare a new transaction by {@link @liquity/lib-base#PopulatedRedemption.increaseAmountByMinimumNetDebt | increasing the amount} to the next lowest possible value, which is the sum of the truncated amount and {@link @liquity/lib-base#LUSD_MINIMUM_NET_DEBT}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PopulatedRedemption<P = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ", S = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ", R = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "PopulatedLiquityTransaction",
              "canonicalReference": "@liquity/lib-base!PopulatedLiquityTransaction:interface"
            },
            {
              "kind": "Content",
              "text": "<P, "
            },
            {
              "kind": "Reference",
              "text": "SentLiquityTransaction",
              "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
            },
            {
              "kind": "Content",
              "text": "<S, "
            },
            {
              "kind": "Reference",
              "text": "LiquityReceipt",
              "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
            },
            {
              "kind": "Content",
              "text": "<R, "
            },
            {
              "kind": "Reference",
              "text": "RedemptionDetails",
              "canonicalReference": "@liquity/lib-base!RedemptionDetails:interface"
            },
            {
              "kind": "Content",
              "text": ">>> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "P",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "typeParameterName": "S",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "PopulatedRedemption",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!PopulatedRedemption#attemptedLUSDAmount:member",
              "docComment": "/**\n * Amount of LUSD the redeemer is trying to redeem.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly attemptedLUSDAmount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "attemptedLUSDAmount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!PopulatedRedemption#increaseAmountByMinimumNetDebt:member(1)",
              "docComment": "/**\n * Prepare a new transaction by increasing the attempted amount to the next lowest redeemable value.\n *\n * @remarks\n *\n * If `maxRedemptionRate` is omitted, the original transaction's `maxRedemptionRate` is reused unless that was also omitted, in which case the current redemption rate (based on the increased amount) plus 0.1% is used as maximum acceptable rate.\n *\n * @param maxRedemptionRate - Maximum acceptable {@link @liquity/lib-base#Fees.redemptionRate | redemption rate} to use in the new transaction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "increaseAmountByMinimumNetDebt(maxRedemptionRate?: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PopulatedRedemption",
                  "canonicalReference": "@liquity/lib-base!PopulatedRedemption:interface"
                },
                {
                  "kind": "Content",
                  "text": "<P, S, R>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "maxRedemptionRate",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "increaseAmountByMinimumNetDebt"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!PopulatedRedemption#isTruncated:member",
              "docComment": "/**\n * Whether `redeemableLUSDAmount` is less than `attemptedLUSDAmount`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly isTruncated: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isTruncated",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!PopulatedRedemption#redeemableLUSDAmount:member",
              "docComment": "/**\n * Maximum amount of LUSD that is currently redeemable from `attemptedLUSDAmount`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly redeemableLUSDAmount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "redeemableLUSDAmount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 7,
              "endIndex": 15
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@liquity/lib-base!ReadableLiquity:interface",
          "docComment": "/**\n * Read the state of the Liquity protocol.\n *\n * @remarks\n *\n * Implemented by {@link @liquity/lib-ethers#EthersLiquity}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ReadableLiquity "
            }
          ],
          "releaseTag": "Public",
          "name": "ReadableLiquity",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!ReadableLiquity#getCollateralSurplusBalance:member(1)",
              "docComment": "/**\n * Get the amount of leftover collateral available for withdrawal by an address.\n *\n * @remarks\n *\n * When a Trove gets liquidated or redeemed, any collateral it has above 110% (in case of liquidation) or 100% collateralization (in case of redemption) gets sent to a pool, where it can be withdrawn from using {@link @liquity/lib-base#TransactableLiquity.claimCollateralSurplus | claimCollateralSurplus()}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getCollateralSurplusBalance(address?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getCollateralSurplusBalance"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!ReadableLiquity#getFees:member(1)",
              "docComment": "/**\n * Get a calculator for current fees.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getFees(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Fees",
                  "canonicalReference": "@liquity/lib-base!Fees:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getFees"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!ReadableLiquity#getFrontendStatus:member(1)",
              "docComment": "/**\n * Check whether an address is registered as a Liquity frontend, and what its kickback rate is.\n *\n * @param address - Address to check.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getFrontendStatus(address?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "FrontendStatus",
                  "canonicalReference": "@liquity/lib-base!FrontendStatus:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getFrontendStatus"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!ReadableLiquity#getLQTYBalance:member(1)",
              "docComment": "/**\n * Get the amount of LQTY held by an address.\n *\n * @param address - Address whose balance should be retrieved.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getLQTYBalance(address?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getLQTYBalance"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!ReadableLiquity#getLQTYStake:member(1)",
              "docComment": "/**\n * Get the current state of an LQTY Stake.\n *\n * @param address - Address that owns the LQTY Stake.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getLQTYStake(address?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "LQTYStake",
                  "canonicalReference": "@liquity/lib-base!LQTYStake:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getLQTYStake"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!ReadableLiquity#getLUSDBalance:member(1)",
              "docComment": "/**\n * Get the amount of LUSD held by an address.\n *\n * @param address - Address whose balance should be retrieved.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getLUSDBalance(address?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getLUSDBalance"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!ReadableLiquity#getLUSDInStabilityPool:member(1)",
              "docComment": "/**\n * Get the total amount of LUSD currently deposited in the Stability Pool.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getLUSDInStabilityPool(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getLUSDInStabilityPool"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!ReadableLiquity#getNumberOfTroves:member(1)",
              "docComment": "/**\n * Get number of Troves that are currently open.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getNumberOfTroves(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getNumberOfTroves"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!ReadableLiquity#getPrice:member(1)",
              "docComment": "/**\n * Get the current price of the native currency (e.g. Ether) in USD.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getPrice(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getPrice"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!ReadableLiquity#getStabilityDeposit:member(1)",
              "docComment": "/**\n * Get the current state of a Stability Deposit.\n *\n * @param address - Address that owns the Stability Deposit.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getStabilityDeposit(address?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StabilityDeposit",
                  "canonicalReference": "@liquity/lib-base!StabilityDeposit:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getStabilityDeposit"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!ReadableLiquity#getTotal:member(1)",
              "docComment": "/**\n * Get the total amount of collateral and debt in the Liquity system.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTotal(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Trove",
                  "canonicalReference": "@liquity/lib-base!Trove:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getTotal"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!ReadableLiquity#getTotalRedistributed:member(1)",
              "docComment": "/**\n * Get the total collateral and debt per stake that has been liquidated through redistribution.\n *\n * @remarks\n *\n * Needed when dealing with instances of {@link @liquity/lib-base#TroveWithPendingRedistribution}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTotalRedistributed(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Trove",
                  "canonicalReference": "@liquity/lib-base!Trove:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getTotalRedistributed"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!ReadableLiquity#getTotalStakedLQTY:member(1)",
              "docComment": "/**\n * Get the total amount of LQTY currently staked.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTotalStakedLQTY(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getTotalStakedLQTY"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!ReadableLiquity#getTrove:member(1)",
              "docComment": "/**\n * Get the current state of a Trove.\n *\n * @param address - Address that owns the Trove.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTrove(address?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UserTrove",
                  "canonicalReference": "@liquity/lib-base!UserTrove:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getTrove"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!ReadableLiquity#getTroveBeforeRedistribution:member(1)",
              "docComment": "/**\n * Get a Trove in its state after the last direct modification.\n *\n * @remarks\n *\n * The current state of a Trove can be fetched using {@link @liquity/lib-base#ReadableLiquity.getTrove | getTrove()}.\n *\n * @param address - Address that owns the Trove.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTroveBeforeRedistribution(address?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TroveWithPendingRedistribution",
                  "canonicalReference": "@liquity/lib-base!TroveWithPendingRedistribution:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getTroveBeforeRedistribution"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!ReadableLiquity#getTroves:member(2)",
              "docComment": "/**\n * Get a slice from the list of Troves.\n *\n * @param params - Controls how the list is sorted, and where the slice begins and ends.\n *\n * @returns Pairs of owner addresses and their Troves.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTroves(params: "
                },
                {
                  "kind": "Reference",
                  "text": "TroveListingParams",
                  "canonicalReference": "@liquity/lib-base!TroveListingParams:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "UserTrove",
                  "canonicalReference": "@liquity/lib-base!UserTrove:class"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "params",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getTroves"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@liquity/lib-base!RedemptionDetails:interface",
          "docComment": "/**\n * Details of a {@link TransactableLiquity.redeemLUSD | redeemLUSD()} transaction.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RedemptionDetails "
            }
          ],
          "releaseTag": "Public",
          "name": "RedemptionDetails",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!RedemptionDetails#actualLUSDAmount:member",
              "docComment": "/**\n * Amount of LUSD that was actually redeemed by the transaction.\n *\n * @remarks\n *\n * This can end up being lower than `attemptedLUSDAmount` due to interference from another transaction that modifies the list of Troves.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "actualLUSDAmount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "actualLUSDAmount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!RedemptionDetails#attemptedLUSDAmount:member",
              "docComment": "/**\n * Amount of LUSD the redeemer tried to redeem.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "attemptedLUSDAmount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "attemptedLUSDAmount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!RedemptionDetails#collateralTaken:member",
              "docComment": "/**\n * Amount of collateral (e.g. Ether) taken from Troves by the transaction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "collateralTaken: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "collateralTaken",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!RedemptionDetails#fee:member",
              "docComment": "/**\n * Amount of native currency (e.g. Ether) deducted as fee from collateral taken.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fee: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "fee",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@liquity/lib-base!SendableLiquity:interface",
          "docComment": "/**\n * Send Liquity transactions.\n *\n * @remarks\n *\n * The functions return an object implementing {@link SentLiquityTransaction}, which can be used to monitor the transaction and get its details when it succeeds.\n *\n * Implemented by {@link @liquity/lib-ethers#SendableEthersLiquity}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SendableLiquity<R = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ", S = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "_SendableFrom",
              "canonicalReference": "@liquity/lib-base!_SendableFrom:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TransactableLiquity",
              "canonicalReference": "@liquity/lib-base!TransactableLiquity:interface"
            },
            {
              "kind": "Content",
              "text": ", R, S> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "typeParameterName": "S",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "SendableLiquity",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!SendableLiquity#adjustTrove:member(1)",
              "docComment": "/**\n * Adjust existing Trove by changing its collateral, debt, or both.\n *\n * @remarks\n *\n * The transaction will fail if the Trove's debt would fall below {@link @liquity/lib-base#LUSD_MINIMUM_DEBT}.\n *\n * If `maxBorrowingRate` is omitted, the current borrowing rate plus 0.5% is used as maximum acceptable rate.\n *\n * @param params - Parameters of the adjustment.\n *\n * @param maxBorrowingRate - Maximum acceptable {@link @liquity/lib-base#Fees.borrowingRate | borrowing rate} if `params` includes `borrowLUSD`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "adjustTrove(params: "
                },
                {
                  "kind": "Reference",
                  "text": "TroveAdjustmentParams",
                  "canonicalReference": "@liquity/lib-base!TroveAdjustmentParams:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ", maxBorrowingRate?: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, "
                },
                {
                  "kind": "Reference",
                  "text": "TroveAdjustmentDetails",
                  "canonicalReference": "@liquity/lib-base!TroveAdjustmentDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 16
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "params",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "maxBorrowingRate",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "adjustTrove"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!SendableLiquity#borrowLUSD:member(1)",
              "docComment": "/**\n * Adjust existing Trove by borrowing more LUSD.\n *\n * @remarks\n *\n * Equivalent to:\n * ```typescript\n * adjustTrove({ borrowLUSD: amount }, maxBorrowingRate)\n * ```\n *\n * @param amount - The amount of LUSD to borrow.\n *\n * @param maxBorrowingRate - Maximum acceptable {@link @liquity/lib-base#Fees.borrowingRate | borrowing rate}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borrowLUSD(amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": ", maxBorrowingRate?: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, "
                },
                {
                  "kind": "Reference",
                  "text": "TroveAdjustmentDetails",
                  "canonicalReference": "@liquity/lib-base!TroveAdjustmentDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "maxBorrowingRate",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "borrowLUSD"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!SendableLiquity#claimCollateralSurplus:member(1)",
              "docComment": "/**\n * Claim leftover collateral after a liquidation or redemption.\n *\n * @remarks\n *\n * Use {@link @liquity/lib-base#ReadableLiquity.getCollateralSurplusBalance | getCollateralSurplusBalance()} to check the amount of collateral available for withdrawal.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "claimCollateralSurplus(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, void>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "claimCollateralSurplus"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!SendableLiquity#closeTrove:member(1)",
              "docComment": "/**\n * Close existing Trove by repaying all debt and withdrawing all collateral.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "closeTrove(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, "
                },
                {
                  "kind": "Reference",
                  "text": "TroveClosureDetails",
                  "canonicalReference": "@liquity/lib-base!TroveClosureDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "closeTrove"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!SendableLiquity#depositCollateral:member(1)",
              "docComment": "/**\n * Adjust existing Trove by depositing more collateral.\n *\n * @remarks\n *\n * Equivalent to:\n * ```typescript\n * adjustTrove({ depositCollateral: amount })\n * ```\n *\n * @param amount - The amount of collateral to add to the Trove's existing collateral.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "depositCollateral(amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, "
                },
                {
                  "kind": "Reference",
                  "text": "TroveAdjustmentDetails",
                  "canonicalReference": "@liquity/lib-base!TroveAdjustmentDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "depositCollateral"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!SendableLiquity#depositLUSDInStabilityPool:member(1)",
              "docComment": "/**\n * Make a new Stability Deposit, or top up existing one.\n *\n * @remarks\n *\n * The `frontendTag` parameter is only effective when making a new deposit.\n *\n * As a side-effect, the transaction will also pay out an existing Stability Deposit's {@link @liquity/lib-base#StabilityDeposit.collateralGain | collateral gain} and {@link @liquity/lib-base#StabilityDeposit.lqtyReward | LQTY reward}.\n *\n * @param amount - Amount of LUSD to add to new or existing deposit.\n *\n * @param frontendTag - Address that should receive a share of this deposit's LQTY rewards.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "depositLUSDInStabilityPool(amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": ", frontendTag?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, "
                },
                {
                  "kind": "Reference",
                  "text": "StabilityDepositChangeDetails",
                  "canonicalReference": "@liquity/lib-base!StabilityDepositChangeDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "frontendTag",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "depositLUSDInStabilityPool"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!SendableLiquity#liquidate:member(1)",
              "docComment": "/**\n * Liquidate one or more undercollateralized Troves.\n *\n * @param address - Address or array of addresses whose Troves to liquidate.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "liquidate(address: "
                },
                {
                  "kind": "Content",
                  "text": "string | string[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquidationDetails",
                  "canonicalReference": "@liquity/lib-base!LiquidationDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "liquidate"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!SendableLiquity#liquidateUpTo:member(1)",
              "docComment": "/**\n * Liquidate the least collateralized Troves up to a maximum number.\n *\n * @param maximumNumberOfTrovesToLiquidate - Stop after liquidating this many Troves.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "liquidateUpTo(maximumNumberOfTrovesToLiquidate: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquidationDetails",
                  "canonicalReference": "@liquity/lib-base!LiquidationDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "maximumNumberOfTrovesToLiquidate",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "liquidateUpTo"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!SendableLiquity#openTrove:member(1)",
              "docComment": "/**\n * Open a new Trove by depositing collateral and borrowing LUSD.\n *\n * @remarks\n *\n * If `maxBorrowingRate` is omitted, the current borrowing rate plus 0.5% is used as maximum acceptable rate.\n *\n * @param params - How much to deposit and borrow.\n *\n * @param maxBorrowingRate - Maximum acceptable {@link @liquity/lib-base#Fees.borrowingRate | borrowing rate}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "openTrove(params: "
                },
                {
                  "kind": "Reference",
                  "text": "TroveCreationParams",
                  "canonicalReference": "@liquity/lib-base!TroveCreationParams:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ", maxBorrowingRate?: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, "
                },
                {
                  "kind": "Reference",
                  "text": "TroveCreationDetails",
                  "canonicalReference": "@liquity/lib-base!TroveCreationDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 16
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "params",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "maxBorrowingRate",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "openTrove"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!SendableLiquity#redeemLUSD:member(1)",
              "docComment": "/**\n * Redeem LUSD to native currency (e.g. Ether) at face value.\n *\n * @remarks\n *\n * If `maxRedemptionRate` is omitted, the current redemption rate (based on `amount`) plus 0.1% is used as maximum acceptable rate.\n *\n * @param amount - Amount of LUSD to be redeemed.\n *\n * @param maxRedemptionRate - Maximum acceptable {@link @liquity/lib-base#Fees.redemptionRate | redemption rate}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "redeemLUSD(amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": ", maxRedemptionRate?: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, "
                },
                {
                  "kind": "Reference",
                  "text": "RedemptionDetails",
                  "canonicalReference": "@liquity/lib-base!RedemptionDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "maxRedemptionRate",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "redeemLUSD"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!SendableLiquity#registerFrontend:member(1)",
              "docComment": "/**\n * Register current wallet address as a Liquity frontend.\n *\n * @param kickbackRate - The portion of LQTY rewards to pass onto users of the frontend (between 0 and 1).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "registerFrontend(kickbackRate: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, void>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "kickbackRate",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "registerFrontend"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!SendableLiquity#repayLUSD:member(1)",
              "docComment": "/**\n * Adjust existing Trove by repaying some of its debt.\n *\n * @remarks\n *\n * Equivalent to:\n * ```typescript\n * adjustTrove({ repayLUSD: amount })\n * ```\n *\n * @param amount - The amount of LUSD to repay.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "repayLUSD(amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, "
                },
                {
                  "kind": "Reference",
                  "text": "TroveAdjustmentDetails",
                  "canonicalReference": "@liquity/lib-base!TroveAdjustmentDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "repayLUSD"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!SendableLiquity#sendLQTY:member(1)",
              "docComment": "/**\n * Send LQTY tokens to an address.\n *\n * @param toAddress - Address of receipient.\n *\n * @param amount - Amount of LQTY to send.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sendLQTY(toAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, void>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "toAddress",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "sendLQTY"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!SendableLiquity#sendLUSD:member(1)",
              "docComment": "/**\n * Send LUSD tokens to an address.\n *\n * @param toAddress - Address of receipient.\n *\n * @param amount - Amount of LUSD to send.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sendLUSD(toAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, void>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "toAddress",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "sendLUSD"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!SendableLiquity#stakeLQTY:member(1)",
              "docComment": "/**\n * Stake LQTY to start earning fee revenue or increase existing stake.\n *\n * @remarks\n *\n * As a side-effect, the transaction will also pay out an existing LQTY stake's {@link @liquity/lib-base#LQTYStake.collateralGain | collateral gain} and {@link @liquity/lib-base#LQTYStake.lusdGain | LUSD gain}.\n *\n * @param amount - Amount of LQTY to add to new or existing stake.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stakeLQTY(amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, void>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "stakeLQTY"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!SendableLiquity#transferCollateralGainToTrove:member(1)",
              "docComment": "/**\n * Transfer {@link @liquity/lib-base#StabilityDeposit.collateralGain | collateral gain} from Stability Deposit to Trove.\n *\n * @remarks\n *\n * The collateral gain is transfered to the Trove as additional collateral.\n *\n * As a side-effect, the transaction will also pay out the Stability Deposit's {@link @liquity/lib-base#StabilityDeposit.lqtyReward | LQTY reward}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transferCollateralGainToTrove(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, "
                },
                {
                  "kind": "Reference",
                  "text": "CollateralGainTransferDetails",
                  "canonicalReference": "@liquity/lib-base!CollateralGainTransferDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "transferCollateralGainToTrove"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!SendableLiquity#unstakeLQTY:member(1)",
              "docComment": "/**\n * Withdraw LQTY from staking.\n *\n * @remarks\n *\n * As a side-effect, the transaction will also pay out the LQTY stake's {@link @liquity/lib-base#LQTYStake.collateralGain | collateral gain} and {@link @liquity/lib-base#LQTYStake.lusdGain | LUSD gain}.\n *\n * @param amount - Amount of LQTY to withdraw.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unstakeLQTY(amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, void>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "unstakeLQTY"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!SendableLiquity#withdrawCollateral:member(1)",
              "docComment": "/**\n * Adjust existing Trove by withdrawing some of its collateral.\n *\n * @remarks\n *\n * Equivalent to:\n * ```typescript\n * adjustTrove({ withdrawCollateral: amount })\n * ```\n *\n * @param amount - The amount of collateral to withdraw from the Trove.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "withdrawCollateral(amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, "
                },
                {
                  "kind": "Reference",
                  "text": "TroveAdjustmentDetails",
                  "canonicalReference": "@liquity/lib-base!TroveAdjustmentDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "withdrawCollateral"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!SendableLiquity#withdrawGainsFromStabilityPool:member(1)",
              "docComment": "/**\n * Withdraw {@link @liquity/lib-base#StabilityDeposit.collateralGain | collateral gain} and {@link @liquity/lib-base#StabilityDeposit.lqtyReward | LQTY reward} from Stability Deposit.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "withdrawGainsFromStabilityPool(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, "
                },
                {
                  "kind": "Reference",
                  "text": "StabilityPoolGainsWithdrawalDetails",
                  "canonicalReference": "@liquity/lib-base!StabilityPoolGainsWithdrawalDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "withdrawGainsFromStabilityPool"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!SendableLiquity#withdrawGainsFromStaking:member(1)",
              "docComment": "/**\n * Withdraw {@link @liquity/lib-base#LQTYStake.collateralGain | collateral gain} and {@link @liquity/lib-base#LQTYStake.lusdGain | LUSD gain} from LQTY stake.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "withdrawGainsFromStaking(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, void>>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "withdrawGainsFromStaking"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!SendableLiquity#withdrawLUSDFromStabilityPool:member(1)",
              "docComment": "/**\n * Withdraw LUSD from Stability Deposit.\n *\n * @remarks\n *\n * As a side-effect, the transaction will also pay out the Stability Deposit's {@link @liquity/lib-base#StabilityDeposit.collateralGain | collateral gain} and {@link @liquity/lib-base#StabilityDeposit.lqtyReward | LQTY reward}.\n *\n * @param amount - Amount of LUSD to withdraw.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "withdrawLUSDFromStabilityPool(amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "SentLiquityTransaction",
                  "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface"
                },
                {
                  "kind": "Content",
                  "text": "<S, "
                },
                {
                  "kind": "Reference",
                  "text": "LiquityReceipt",
                  "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": "<R, "
                },
                {
                  "kind": "Reference",
                  "text": "StabilityDepositChangeDetails",
                  "canonicalReference": "@liquity/lib-base!StabilityDepositChangeDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "withdrawLUSDFromStabilityPool"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 5,
              "endIndex": 9
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@liquity/lib-base!SentLiquityTransaction:interface",
          "docComment": "/**\n * A transaction that has already been sent.\n *\n * @remarks\n *\n * Implemented by {@link @liquity/lib-ethers#SentEthersLiquityTransaction}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SentLiquityTransaction<S = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ", T extends "
            },
            {
              "kind": "Reference",
              "text": "LiquityReceipt",
              "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
            },
            {
              "kind": "Content",
              "text": " "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "LiquityReceipt",
              "canonicalReference": "@liquity/lib-base!LiquityReceipt:type"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "S",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "defaultTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "name": "SentLiquityTransaction",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!SentLiquityTransaction#getReceipt:member(1)",
              "docComment": "/**\n * Check whether the transaction has been mined, and whether it was successful.\n *\n * @remarks\n *\n * Unlike {@link @liquity/lib-base#SentLiquityTransaction.waitForReceipt | waitForReceipt()}, this function doesn't wait for the transaction to be mined.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getReceipt(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getReceipt"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!SentLiquityTransaction#rawSentTransaction:member",
              "docComment": "/**\n * Implementation-specific sent transaction object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly rawSentTransaction: "
                },
                {
                  "kind": "Content",
                  "text": "S"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rawSentTransaction",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!SentLiquityTransaction#waitForReceipt:member(1)",
              "docComment": "/**\n * Wait for the transaction to be mined, and check whether it was successful.\n *\n * @returns Either a {@link @liquity/lib-base#FailedReceipt} or a {@link @liquity/lib-base#SuccessfulReceipt}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "waitForReceipt(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Extract",
                  "canonicalReference": "!Extract:type"
                },
                {
                  "kind": "Content",
                  "text": "<T, "
                },
                {
                  "kind": "Reference",
                  "text": "MinedReceipt",
                  "canonicalReference": "@liquity/lib-base!MinedReceipt:type"
                },
                {
                  "kind": "Content",
                  "text": ">>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "waitForReceipt"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@liquity/lib-base!StabilityDeposit:class",
          "docComment": "/**\n * A Stability Deposit and its accrued gains.\n *\n * @remarks\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `StabilityDeposit` class.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class StabilityDeposit "
            }
          ],
          "releaseTag": "Public",
          "name": "StabilityDeposit",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!StabilityDeposit#apply:member(1)",
              "docComment": "/**\n * Apply a {@link StabilityDepositChange} to this Stability Deposit.\n *\n * @returns The new deposited LUSD amount.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "apply(change: "
                },
                {
                  "kind": "Reference",
                  "text": "StabilityDepositChange",
                  "canonicalReference": "@liquity/lib-base!StabilityDepositChange:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "> | undefined"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "change",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                }
              ],
              "name": "apply"
            },
            {
              "kind": "Property",
              "canonicalReference": "@liquity/lib-base!StabilityDeposit#collateralGain:member",
              "docComment": "/**\n * Amount of native currency (e.g. Ether) received in exchange for the used-up LUSD.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly collateralGain: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "collateralGain",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@liquity/lib-base!StabilityDeposit#currentLUSD:member",
              "docComment": "/**\n * Amount of LUSD left in the Stability Deposit.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly currentLUSD: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "currentLUSD",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!StabilityDeposit#equals:member(1)",
              "docComment": "/**\n * Compare to another instance of `StabilityDeposit`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "equals(that: "
                },
                {
                  "kind": "Reference",
                  "text": "StabilityDeposit",
                  "canonicalReference": "@liquity/lib-base!StabilityDeposit:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "that",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "equals"
            },
            {
              "kind": "Property",
              "canonicalReference": "@liquity/lib-base!StabilityDeposit#initialLUSD:member",
              "docComment": "/**\n * Amount of LUSD in the Stability Deposit at the time of the last direct modification.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly initialLUSD: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "initialLUSD",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@liquity/lib-base!StabilityDeposit#isEmpty:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get isEmpty(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isEmpty",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@liquity/lib-base!StabilityDeposit#lqtyReward:member",
              "docComment": "/**\n * Amount of LQTY rewarded since the last modification of the Stability Deposit.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly lqtyReward: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "lqtyReward",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!StabilityDeposit#whatChanged:member(1)",
              "docComment": "/**\n * Calculate the difference between the `currentLUSD` in this Stability Deposit and `thatLUSD`.\n *\n * @returns An object representing the change, or `undefined` if the deposited amounts are equal.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "whatChanged(thatLUSD: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "StabilityDepositChange",
                  "canonicalReference": "@liquity/lib-base!StabilityDepositChange:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": "> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "thatLUSD",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "whatChanged"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@liquity/lib-base!StabilityDepositChange:type",
          "docComment": "/**\n * Represents the change between two Stability Deposit states.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type StabilityDepositChange<T> = "
            },
            {
              "kind": "Content",
              "text": "{\n    depositLUSD: T;\n    withdrawLUSD?: undefined;\n} | {\n    depositLUSD?: undefined;\n    withdrawLUSD: T;\n    withdrawAllLUSD: boolean;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "StabilityDepositChange",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@liquity/lib-base!StabilityDepositChangeDetails:interface",
          "docComment": "/**\n * Details of a {@link TransactableLiquity.depositLUSDInStabilityPool | depositLUSDInStabilityPool()} or {@link TransactableLiquity.withdrawLUSDFromStabilityPool | withdrawLUSDFromStabilityPool()} transaction.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StabilityDepositChangeDetails extends "
            },
            {
              "kind": "Reference",
              "text": "StabilityPoolGainsWithdrawalDetails",
              "canonicalReference": "@liquity/lib-base!StabilityPoolGainsWithdrawalDetails:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "StabilityDepositChangeDetails",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!StabilityDepositChangeDetails#change:member",
              "docComment": "/**\n * Change that was made to the deposit by this transaction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "change: "
                },
                {
                  "kind": "Reference",
                  "text": "StabilityDepositChange",
                  "canonicalReference": "@liquity/lib-base!StabilityDepositChange:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "change",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@liquity/lib-base!StabilityPoolGainsWithdrawalDetails:interface",
          "docComment": "/**\n * Details of a {@link TransactableLiquity.withdrawGainsFromStabilityPool | withdrawGainsFromStabilityPool()} transaction.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StabilityPoolGainsWithdrawalDetails "
            }
          ],
          "releaseTag": "Public",
          "name": "StabilityPoolGainsWithdrawalDetails",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!StabilityPoolGainsWithdrawalDetails#collateralGain:member",
              "docComment": "/**\n * Amount of native currency (e.g. Ether) paid out to the depositor in this transaction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "collateralGain: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "collateralGain",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!StabilityPoolGainsWithdrawalDetails#lqtyReward:member",
              "docComment": "/**\n * Amount of LQTY rewarded to the depositor in this transaction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lqtyReward: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "lqtyReward",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!StabilityPoolGainsWithdrawalDetails#lusdLoss:member",
              "docComment": "/**\n * Amount of LUSD burned from the deposit by liquidations since the last modification.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lusdLoss: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "lusdLoss",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!StabilityPoolGainsWithdrawalDetails#newLUSDDeposit:member",
              "docComment": "/**\n * Amount of LUSD in the deposit directly after this transaction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "newLUSDDeposit: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "newLUSDDeposit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@liquity/lib-base!SuccessfulReceipt:type",
          "docComment": "/**\n * Indicates that the transaction has succeeded.\n *\n * @remarks\n *\n * The `rawReceipt` property is an implementation-specific transaction receipt object.\n *\n * The `details` property may contain more information about the transaction. See the return types of {@link TransactableLiquity} functions for the exact contents of `details` for each type of Liquity transaction.\n *\n * Returned by {@link SentLiquityTransaction.getReceipt} and {@link SentLiquityTransaction.waitForReceipt}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type SuccessfulReceipt<R = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": ", D = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "{\n    status: \"succeeded\";\n    rawReceipt: R;\n    details: D;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SuccessfulReceipt",
          "typeParameters": [
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "typeParameterName": "D",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@liquity/lib-base!TransactableLiquity:interface",
          "docComment": "/**\n * Send Liquity transactions and wait for them to succeed.\n *\n * @remarks\n *\n * The functions return the details of the transaction (if any), or throw an implementation-specific subclass of {@link TransactionFailedError} in case of transaction failure.\n *\n * Implemented by {@link @liquity/lib-ethers#EthersLiquity}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TransactableLiquity "
            }
          ],
          "releaseTag": "Public",
          "name": "TransactableLiquity",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!TransactableLiquity#adjustTrove:member(1)",
              "docComment": "/**\n * Adjust existing Trove by changing its collateral, debt, or both.\n *\n * @remarks\n *\n * The transaction will fail if the Trove's debt would fall below {@link @liquity/lib-base#LUSD_MINIMUM_DEBT}.\n *\n * If `maxBorrowingRate` is omitted, the current borrowing rate plus 0.5% is used as maximum acceptable rate.\n *\n * @param params - Parameters of the adjustment.\n *\n * @param maxBorrowingRate - Maximum acceptable {@link @liquity/lib-base#Fees.borrowingRate | borrowing rate} if `params` includes `borrowLUSD`.\n *\n * @throws\n *\n * Throws {@link TransactionFailedError} in case of transaction failure.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "adjustTrove(params: "
                },
                {
                  "kind": "Reference",
                  "text": "TroveAdjustmentParams",
                  "canonicalReference": "@liquity/lib-base!TroveAdjustmentParams:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ", maxBorrowingRate?: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TroveAdjustmentDetails",
                  "canonicalReference": "@liquity/lib-base!TroveAdjustmentDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "params",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "maxBorrowingRate",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "adjustTrove"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!TransactableLiquity#borrowLUSD:member(1)",
              "docComment": "/**\n * Adjust existing Trove by borrowing more LUSD.\n *\n * @remarks\n *\n * Equivalent to:\n * ```typescript\n * adjustTrove({ borrowLUSD: amount }, maxBorrowingRate)\n * ```\n *\n * @param amount - The amount of LUSD to borrow.\n *\n * @param maxBorrowingRate - Maximum acceptable {@link @liquity/lib-base#Fees.borrowingRate | borrowing rate}.\n *\n * @throws\n *\n * Throws {@link TransactionFailedError} in case of transaction failure.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "borrowLUSD(amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": ", maxBorrowingRate?: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TroveAdjustmentDetails",
                  "canonicalReference": "@liquity/lib-base!TroveAdjustmentDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "maxBorrowingRate",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "borrowLUSD"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!TransactableLiquity#claimCollateralSurplus:member(1)",
              "docComment": "/**\n * Claim leftover collateral after a liquidation or redemption.\n *\n * @remarks\n *\n * Use {@link @liquity/lib-base#ReadableLiquity.getCollateralSurplusBalance | getCollateralSurplusBalance()} to check the amount of collateral available for withdrawal.\n *\n * @throws\n *\n * Throws {@link TransactionFailedError} in case of transaction failure.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "claimCollateralSurplus(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "claimCollateralSurplus"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!TransactableLiquity#closeTrove:member(1)",
              "docComment": "/**\n * Close existing Trove by repaying all debt and withdrawing all collateral.\n *\n * @throws\n *\n * Throws {@link TransactionFailedError} in case of transaction failure.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "closeTrove(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TroveClosureDetails",
                  "canonicalReference": "@liquity/lib-base!TroveClosureDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "closeTrove"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!TransactableLiquity#depositCollateral:member(1)",
              "docComment": "/**\n * Adjust existing Trove by depositing more collateral.\n *\n * @remarks\n *\n * Equivalent to:\n * ```typescript\n * adjustTrove({ depositCollateral: amount })\n * ```\n *\n * @param amount - The amount of collateral to add to the Trove's existing collateral.\n *\n * @throws\n *\n * Throws {@link TransactionFailedError} in case of transaction failure.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "depositCollateral(amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TroveAdjustmentDetails",
                  "canonicalReference": "@liquity/lib-base!TroveAdjustmentDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "depositCollateral"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!TransactableLiquity#depositLUSDInStabilityPool:member(1)",
              "docComment": "/**\n * Make a new Stability Deposit, or top up existing one.\n *\n * @remarks\n *\n * The `frontendTag` parameter is only effective when making a new deposit.\n *\n * As a side-effect, the transaction will also pay out an existing Stability Deposit's {@link @liquity/lib-base#StabilityDeposit.collateralGain | collateral gain} and {@link @liquity/lib-base#StabilityDeposit.lqtyReward | LQTY reward}.\n *\n * @param amount - Amount of LUSD to add to new or existing deposit.\n *\n * @param frontendTag - Address that should receive a share of this deposit's LQTY rewards.\n *\n * @throws\n *\n * Throws {@link TransactionFailedError} in case of transaction failure.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "depositLUSDInStabilityPool(amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": ", frontendTag?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StabilityDepositChangeDetails",
                  "canonicalReference": "@liquity/lib-base!StabilityDepositChangeDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "frontendTag",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "depositLUSDInStabilityPool"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!TransactableLiquity#liquidate:member(1)",
              "docComment": "/**\n * Liquidate one or more undercollateralized Troves.\n *\n * @param address - Address or array of addresses whose Troves to liquidate.\n *\n * @throws\n *\n * Throws {@link TransactionFailedError} in case of transaction failure.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "liquidate(address: "
                },
                {
                  "kind": "Content",
                  "text": "string | string[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "LiquidationDetails",
                  "canonicalReference": "@liquity/lib-base!LiquidationDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "address",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "liquidate"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!TransactableLiquity#liquidateUpTo:member(1)",
              "docComment": "/**\n * Liquidate the least collateralized Troves up to a maximum number.\n *\n * @param maximumNumberOfTrovesToLiquidate - Stop after liquidating this many Troves.\n *\n * @throws\n *\n * Throws {@link TransactionFailedError} in case of transaction failure.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "liquidateUpTo(maximumNumberOfTrovesToLiquidate: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "LiquidationDetails",
                  "canonicalReference": "@liquity/lib-base!LiquidationDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "maximumNumberOfTrovesToLiquidate",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "liquidateUpTo"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!TransactableLiquity#openTrove:member(1)",
              "docComment": "/**\n * Open a new Trove by depositing collateral and borrowing LUSD.\n *\n * @remarks\n *\n * If `maxBorrowingRate` is omitted, the current borrowing rate plus 0.5% is used as maximum acceptable rate.\n *\n * @param params - How much to deposit and borrow.\n *\n * @param maxBorrowingRate - Maximum acceptable {@link @liquity/lib-base#Fees.borrowingRate | borrowing rate}.\n *\n * @throws\n *\n * Throws {@link TransactionFailedError} in case of transaction failure.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "openTrove(params: "
                },
                {
                  "kind": "Reference",
                  "text": "TroveCreationParams",
                  "canonicalReference": "@liquity/lib-base!TroveCreationParams:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ", maxBorrowingRate?: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TroveCreationDetails",
                  "canonicalReference": "@liquity/lib-base!TroveCreationDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "params",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "maxBorrowingRate",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "openTrove"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!TransactableLiquity#redeemLUSD:member(1)",
              "docComment": "/**\n * Redeem LUSD to native currency (e.g. Ether) at face value.\n *\n * @remarks\n *\n * If `maxRedemptionRate` is omitted, the current redemption rate (based on `amount`) plus 0.1% is used as maximum acceptable rate.\n *\n * @param amount - Amount of LUSD to be redeemed.\n *\n * @param maxRedemptionRate - Maximum acceptable {@link @liquity/lib-base#Fees.redemptionRate | redemption rate}.\n *\n * @throws\n *\n * Throws {@link TransactionFailedError} in case of transaction failure.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "redeemLUSD(amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": ", maxRedemptionRate?: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RedemptionDetails",
                  "canonicalReference": "@liquity/lib-base!RedemptionDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "maxRedemptionRate",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "redeemLUSD"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!TransactableLiquity#registerFrontend:member(1)",
              "docComment": "/**\n * Register current wallet address as a Liquity frontend.\n *\n * @param kickbackRate - The portion of LQTY rewards to pass onto users of the frontend (between 0 and 1).\n *\n * @throws\n *\n * Throws {@link TransactionFailedError} in case of transaction failure.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "registerFrontend(kickbackRate: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "kickbackRate",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "registerFrontend"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!TransactableLiquity#repayLUSD:member(1)",
              "docComment": "/**\n * Adjust existing Trove by repaying some of its debt.\n *\n * @remarks\n *\n * Equivalent to:\n * ```typescript\n * adjustTrove({ repayLUSD: amount })\n * ```\n *\n * @param amount - The amount of LUSD to repay.\n *\n * @throws\n *\n * Throws {@link TransactionFailedError} in case of transaction failure.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "repayLUSD(amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TroveAdjustmentDetails",
                  "canonicalReference": "@liquity/lib-base!TroveAdjustmentDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "repayLUSD"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!TransactableLiquity#sendLQTY:member(1)",
              "docComment": "/**\n * Send LQTY tokens to an address.\n *\n * @param toAddress - Address of receipient.\n *\n * @param amount - Amount of LQTY to send.\n *\n * @throws\n *\n * Throws {@link TransactionFailedError} in case of transaction failure.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sendLQTY(toAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "toAddress",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "sendLQTY"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!TransactableLiquity#sendLUSD:member(1)",
              "docComment": "/**\n * Send LUSD tokens to an address.\n *\n * @param toAddress - Address of receipient.\n *\n * @param amount - Amount of LUSD to send.\n *\n * @throws\n *\n * Throws {@link TransactionFailedError} in case of transaction failure.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sendLUSD(toAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "toAddress",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "sendLUSD"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!TransactableLiquity#stakeLQTY:member(1)",
              "docComment": "/**\n * Stake LQTY to start earning fee revenue or increase existing stake.\n *\n * @remarks\n *\n * As a side-effect, the transaction will also pay out an existing LQTY stake's {@link @liquity/lib-base#LQTYStake.collateralGain | collateral gain} and {@link @liquity/lib-base#LQTYStake.lusdGain | LUSD gain}.\n *\n * @param amount - Amount of LQTY to add to new or existing stake.\n *\n * @throws\n *\n * Throws {@link TransactionFailedError} in case of transaction failure.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stakeLQTY(amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "stakeLQTY"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!TransactableLiquity#transferCollateralGainToTrove:member(1)",
              "docComment": "/**\n * Transfer {@link @liquity/lib-base#StabilityDeposit.collateralGain | collateral gain} from Stability Deposit to Trove.\n *\n * @remarks\n *\n * The collateral gain is transfered to the Trove as additional collateral.\n *\n * As a side-effect, the transaction will also pay out the Stability Deposit's {@link @liquity/lib-base#StabilityDeposit.lqtyReward | LQTY reward}.\n *\n * @throws\n *\n * Throws {@link TransactionFailedError} in case of transaction failure.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transferCollateralGainToTrove(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "CollateralGainTransferDetails",
                  "canonicalReference": "@liquity/lib-base!CollateralGainTransferDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "transferCollateralGainToTrove"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!TransactableLiquity#unstakeLQTY:member(1)",
              "docComment": "/**\n * Withdraw LQTY from staking.\n *\n * @remarks\n *\n * As a side-effect, the transaction will also pay out the LQTY stake's {@link @liquity/lib-base#LQTYStake.collateralGain | collateral gain} and {@link @liquity/lib-base#LQTYStake.lusdGain | LUSD gain}.\n *\n * @param amount - Amount of LQTY to withdraw.\n *\n * @throws\n *\n * Throws {@link TransactionFailedError} in case of transaction failure.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unstakeLQTY(amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "unstakeLQTY"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!TransactableLiquity#withdrawCollateral:member(1)",
              "docComment": "/**\n * Adjust existing Trove by withdrawing some of its collateral.\n *\n * @remarks\n *\n * Equivalent to:\n * ```typescript\n * adjustTrove({ withdrawCollateral: amount })\n * ```\n *\n * @param amount - The amount of collateral to withdraw from the Trove.\n *\n * @throws\n *\n * Throws {@link TransactionFailedError} in case of transaction failure.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "withdrawCollateral(amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TroveAdjustmentDetails",
                  "canonicalReference": "@liquity/lib-base!TroveAdjustmentDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "withdrawCollateral"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!TransactableLiquity#withdrawGainsFromStabilityPool:member(1)",
              "docComment": "/**\n * Withdraw {@link @liquity/lib-base#StabilityDeposit.collateralGain | collateral gain} and {@link @liquity/lib-base#StabilityDeposit.lqtyReward | LQTY reward} from Stability Deposit.\n *\n * @throws\n *\n * Throws {@link TransactionFailedError} in case of transaction failure.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "withdrawGainsFromStabilityPool(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StabilityPoolGainsWithdrawalDetails",
                  "canonicalReference": "@liquity/lib-base!StabilityPoolGainsWithdrawalDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "withdrawGainsFromStabilityPool"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!TransactableLiquity#withdrawGainsFromStaking:member(1)",
              "docComment": "/**\n * Withdraw {@link @liquity/lib-base#LQTYStake.collateralGain | collateral gain} and {@link @liquity/lib-base#LQTYStake.lusdGain | LUSD gain} from LQTY stake.\n *\n * @throws\n *\n * Throws {@link TransactionFailedError} in case of transaction failure.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "withdrawGainsFromStaking(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "withdrawGainsFromStaking"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@liquity/lib-base!TransactableLiquity#withdrawLUSDFromStabilityPool:member(1)",
              "docComment": "/**\n * Withdraw LUSD from Stability Deposit.\n *\n * @remarks\n *\n * As a side-effect, the transaction will also pay out the Stability Deposit's {@link @liquity/lib-base#StabilityDeposit.collateralGain | collateral gain} and {@link @liquity/lib-base#StabilityDeposit.lqtyReward | LQTY reward}.\n *\n * @param amount - Amount of LUSD to withdraw.\n *\n * @throws\n *\n * Throws {@link TransactionFailedError} in case of transaction failure.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "withdrawLUSDFromStabilityPool(amount: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StabilityDepositChangeDetails",
                  "canonicalReference": "@liquity/lib-base!StabilityDepositChangeDetails:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "amount",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "withdrawLUSDFromStabilityPool"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@liquity/lib-base!TransactionFailedError:class",
          "docComment": "/**\n * Thrown by {@link TransactableLiquity} functions in case of transaction failure.\n *\n * @remarks\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `TransactionFailedError` class.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TransactionFailedError<T extends "
            },
            {
              "kind": "Reference",
              "text": "FailedReceipt",
              "canonicalReference": "@liquity/lib-base!FailedReceipt:type"
            },
            {
              "kind": "Content",
              "text": " "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "FailedReceipt",
              "canonicalReference": "@liquity/lib-base!FailedReceipt:type"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              }
            }
          ],
          "name": "TransactionFailedError",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@liquity/lib-base!TransactionFailedError#failedReceipt:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly failedReceipt: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "failedReceipt",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@liquity/lib-base!Trove:class",
          "docComment": "/**\n * A combination of collateral and debt.\n *\n * @remarks\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `Trove` class.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Trove "
            }
          ],
          "releaseTag": "Public",
          "name": "Trove",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Trove#add:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "add(that: "
                },
                {
                  "kind": "Reference",
                  "text": "Trove",
                  "canonicalReference": "@liquity/lib-base!Trove:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Trove",
                  "canonicalReference": "@liquity/lib-base!Trove:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "that",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "add"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Trove#addCollateral:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addCollateral(collateral: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Trove",
                  "canonicalReference": "@liquity/lib-base!Trove:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "collateral",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "addCollateral"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Trove#addDebt:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addDebt(debt: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Trove",
                  "canonicalReference": "@liquity/lib-base!Trove:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "debt",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "addDebt"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Trove#adjust:member(1)",
              "docComment": "/**\n * Calculate the result of an {@link TransactableLiquity.adjustTrove | adjustTrove()} transaction on this Trove.\n *\n * @param params - Parameters of the transaction.\n *\n * @param borrowingRate - Borrowing rate to use when adding to the Trove's debt.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "adjust(params: "
                },
                {
                  "kind": "Reference",
                  "text": "TroveAdjustmentParams",
                  "canonicalReference": "@liquity/lib-base!TroveAdjustmentParams:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ", borrowingRate?: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Trove",
                  "canonicalReference": "@liquity/lib-base!Trove:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "params",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "borrowingRate",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "adjust"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Trove#adjustTo:member(1)",
              "docComment": "/**\n * Calculate the parameters of an {@link TransactableLiquity.adjustTrove | adjustTrove()} transaction that will change this Trove into the given Trove.\n *\n * @param that - The desired result of the transaction.\n *\n * @param borrowingRate - Current borrowing rate.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "adjustTo(that: "
                },
                {
                  "kind": "Reference",
                  "text": "Trove",
                  "canonicalReference": "@liquity/lib-base!Trove:class"
                },
                {
                  "kind": "Content",
                  "text": ", borrowingRate?: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TroveAdjustmentParams",
                  "canonicalReference": "@liquity/lib-base!TroveAdjustmentParams:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "that",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "borrowingRate",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "adjustTo"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Trove#apply:member(1)",
              "docComment": "/**\n * Make a new Trove by applying a {@link TroveChange} to this Trove.\n *\n * @param change - The change to apply.\n *\n * @param borrowingRate - Borrowing rate to use when adding a borrowed amount to the Trove's debt.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "apply(change: "
                },
                {
                  "kind": "Reference",
                  "text": "TroveChange",
                  "canonicalReference": "@liquity/lib-base!TroveChange:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": "> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", borrowingRate?: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Trove",
                  "canonicalReference": "@liquity/lib-base!Trove:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "change",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "borrowingRate",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "apply"
            },
            {
              "kind": "Property",
              "canonicalReference": "@liquity/lib-base!Trove#collateral:member",
              "docComment": "/**\n * Amount of native currency (e.g. Ether) collateralized.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly collateral: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "collateral",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Trove#collateralRatio:member(1)",
              "docComment": "/**\n * Calculate the Trove's collateralization ratio at a given price.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "collateralRatio(price: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "price",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "collateralRatio"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Trove#collateralRatioIsBelowCritical:member(1)",
              "docComment": "/**\n * Whether the collateralization ratio is less than the {@link CRITICAL_COLLATERAL_RATIO} at a given price.\n *\n * @example\n *\n * Can be used to check whether the Liquity protocol is in recovery mode by using it on the return value of {@link ReadableLiquity.getTotal | getTotal()}. For example:\n * ```typescript\n * const total = await liquity.getTotal();\n * const price = await liquity.getPrice();\n *\n * if (total.collateralRatioIsBelowCritical(price)) {\n *   // Recovery mode is active\n * }\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "collateralRatioIsBelowCritical(price: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "price",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "collateralRatioIsBelowCritical"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Trove#collateralRatioIsBelowMinimum:member(1)",
              "docComment": "/**\n * Whether the Trove is undercollateralized at a given price.\n *\n * @returns `true` if the Trove's collateralization ratio is less than the {@link MINIMUM_COLLATERAL_RATIO}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "collateralRatioIsBelowMinimum(price: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "price",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "collateralRatioIsBelowMinimum"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Trove.create:member(1)",
              "docComment": "/**\n * Calculate the result of an {@link TransactableLiquity.openTrove | openTrove()} transaction.\n *\n * @param params - Parameters of the transaction.\n *\n * @param borrowingRate - Borrowing rate to use when calculating the Trove's debt.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static create(params: "
                },
                {
                  "kind": "Reference",
                  "text": "TroveCreationParams",
                  "canonicalReference": "@liquity/lib-base!TroveCreationParams:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ", borrowingRate?: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Trove",
                  "canonicalReference": "@liquity/lib-base!Trove:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "params",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "borrowingRate",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "create"
            },
            {
              "kind": "Property",
              "canonicalReference": "@liquity/lib-base!Trove#debt:member",
              "docComment": "/**\n * Amount of LUSD owed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly debt: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "debt",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Trove#equals:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "equals(that: "
                },
                {
                  "kind": "Reference",
                  "text": "Trove",
                  "canonicalReference": "@liquity/lib-base!Trove:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "that",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "equals"
            },
            {
              "kind": "Property",
              "canonicalReference": "@liquity/lib-base!Trove#isEmpty:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get isEmpty(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isEmpty",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Trove#isOpenableInRecoveryMode:member(1)",
              "docComment": "/**\n * Whether the Trove is sufficiently collateralized to be opened during recovery mode.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isOpenableInRecoveryMode(price: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "price",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isOpenableInRecoveryMode"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Trove#multiply:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "multiply(multiplier: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Trove",
                  "canonicalReference": "@liquity/lib-base!Trove:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "multiplier",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "multiply"
            },
            {
              "kind": "Property",
              "canonicalReference": "@liquity/lib-base!Trove#netDebt:member",
              "docComment": "/**\n * Amount of LUSD that must be repaid to close this Trove.\n *\n * @remarks\n *\n * This doesn't include the liquidation reserve, which is refunded in case of normal closure.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get netDebt(): "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "netDebt",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Trove.recreate:member(1)",
              "docComment": "/**\n * Calculate the parameters of an {@link TransactableLiquity.openTrove | openTrove()} transaction that will result in the given Trove.\n *\n * @param that - The Trove to recreate.\n *\n * @param borrowingRate - Current borrowing rate.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static recreate(that: "
                },
                {
                  "kind": "Reference",
                  "text": "Trove",
                  "canonicalReference": "@liquity/lib-base!Trove:class"
                },
                {
                  "kind": "Content",
                  "text": ", borrowingRate?: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TroveCreationParams",
                  "canonicalReference": "@liquity/lib-base!TroveCreationParams:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "that",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "borrowingRate",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "recreate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Trove#setCollateral:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setCollateral(collateral: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Trove",
                  "canonicalReference": "@liquity/lib-base!Trove:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "collateral",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setCollateral"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Trove#setDebt:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setDebt(debt: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Trove",
                  "canonicalReference": "@liquity/lib-base!Trove:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "debt",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setDebt"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Trove#subtract:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subtract(that: "
                },
                {
                  "kind": "Reference",
                  "text": "Trove",
                  "canonicalReference": "@liquity/lib-base!Trove:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Trove",
                  "canonicalReference": "@liquity/lib-base!Trove:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "that",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "subtract"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Trove#subtractCollateral:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subtractCollateral(collateral: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Trove",
                  "canonicalReference": "@liquity/lib-base!Trove:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "collateral",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "subtractCollateral"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Trove#subtractDebt:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subtractDebt(debt: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Trove",
                  "canonicalReference": "@liquity/lib-base!Trove:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "debt",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "subtractDebt"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!Trove#whatChanged:member(1)",
              "docComment": "/**\n * Calculate the difference between this Trove and another.\n *\n * @param that - The other Trove.\n *\n * @param borrowingRate - Borrowing rate to use when calculating a borrowed amount.\n *\n * @returns An object representing the change, or `undefined` if the Troves are equal.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "whatChanged(that: "
                },
                {
                  "kind": "Reference",
                  "text": "Trove",
                  "canonicalReference": "@liquity/lib-base!Trove:class"
                },
                {
                  "kind": "Content",
                  "text": ", borrowingRate?: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimalish",
                  "canonicalReference": "@liquity/lib-base!Decimalish:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TroveChange",
                  "canonicalReference": "@liquity/lib-base!TroveChange:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": "> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "that",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "borrowingRate",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "whatChanged"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@liquity/lib-base!TroveAdjustmentDetails:interface",
          "docComment": "/**\n * Details of an {@link TransactableLiquity.adjustTrove | adjustTrove()} transaction.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TroveAdjustmentDetails "
            }
          ],
          "releaseTag": "Public",
          "name": "TroveAdjustmentDetails",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!TroveAdjustmentDetails#fee:member",
              "docComment": "/**\n * Amount of LUSD added to the Trove's debt as borrowing fee.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fee: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "fee",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!TroveAdjustmentDetails#newTrove:member",
              "docComment": "/**\n * New state of the adjusted Trove directly after the transaction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "newTrove: "
                },
                {
                  "kind": "Reference",
                  "text": "Trove",
                  "canonicalReference": "@liquity/lib-base!Trove:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "newTrove",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!TroveAdjustmentDetails#params:member",
              "docComment": "/**\n * Parameters of the adjustment.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "params: "
                },
                {
                  "kind": "Reference",
                  "text": "TroveAdjustmentParams",
                  "canonicalReference": "@liquity/lib-base!TroveAdjustmentParams:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "params",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@liquity/lib-base!TroveAdjustmentParams:type",
          "docComment": "/**\n * Parameters of an {@link TransactableLiquity.adjustTrove | adjustTrove()} transaction.\n *\n * @remarks\n *\n * The type parameter `T` specifies the allowed value type(s) of the particular `TroveAdjustmentParams` object's properties.\n *\n * Even though all properties are optional, a valid `TroveAdjustmentParams` object must define at least one.\n *\n * Defining both `depositCollateral` and `withdrawCollateral`, or both `borrowLUSD` and `repayLUSD` at the same time is disallowed, and will result in a type-checking error.\n *\n * <h2>Properties</h2>\n *\n * <table>\n *\n * <tr> <th> Property </th> <th> Type </th> <th> Description </th> </tr>\n *\n * <tr> <td> depositCollateral? </td> <td> T </td> <td> <i>(Optional)</i> The amount of collateral that's deposited. </td> </tr>\n *\n * <tr> <td> withdrawCollateral? </td> <td> T </td> <td> <i>(Optional)</i> The amount of collateral that's withdrawn. </td> </tr>\n *\n * <tr> <td> borrowLUSD? </td> <td> T </td> <td> <i>(Optional)</i> The amount of LUSD that's borrowed. </td> </tr>\n *\n * <tr> <td> repayLUSD? </td> <td> T </td> <td> <i>(Optional)</i> The amount of LUSD that's repaid. </td> </tr>\n *\n * </table>\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TroveAdjustmentParams<T = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "_CollateralChange",
              "canonicalReference": "@liquity/lib-base!_CollateralChange:type"
            },
            {
              "kind": "Content",
              "text": "<T> & "
            },
            {
              "kind": "Reference",
              "text": "_NoDebtChange",
              "canonicalReference": "@liquity/lib-base!_NoDebtChange:type"
            },
            {
              "kind": "Content",
              "text": ") | ("
            },
            {
              "kind": "Reference",
              "text": "_DebtChange",
              "canonicalReference": "@liquity/lib-base!_DebtChange:type"
            },
            {
              "kind": "Content",
              "text": "<T> & "
            },
            {
              "kind": "Reference",
              "text": "_NoCollateralChange",
              "canonicalReference": "@liquity/lib-base!_NoCollateralChange:type"
            },
            {
              "kind": "Content",
              "text": ") | ("
            },
            {
              "kind": "Reference",
              "text": "_CollateralChange",
              "canonicalReference": "@liquity/lib-base!_CollateralChange:type"
            },
            {
              "kind": "Content",
              "text": "<T> & "
            },
            {
              "kind": "Reference",
              "text": "_DebtChange",
              "canonicalReference": "@liquity/lib-base!_DebtChange:type"
            },
            {
              "kind": "Content",
              "text": "<T>)"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "TroveAdjustmentParams",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 16
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@liquity/lib-base!TroveChange:type",
          "docComment": "/**\n * Represents the change between two Trove states.\n *\n * @remarks\n *\n * Returned by {@link Trove.whatChanged}.\n *\n * Passed as a parameter to {@link Trove.apply}.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TroveChange<T> = "
            },
            {
              "kind": "Content",
              "text": "{\n    type: \"invalidCreation\";\n    invalidTrove: "
            },
            {
              "kind": "Reference",
              "text": "Trove",
              "canonicalReference": "@liquity/lib-base!Trove:class"
            },
            {
              "kind": "Content",
              "text": ";\n    error: "
            },
            {
              "kind": "Reference",
              "text": "TroveCreationError",
              "canonicalReference": "@liquity/lib-base!TroveCreationError:type"
            },
            {
              "kind": "Content",
              "text": ";\n} | {\n    type: \"creation\";\n    params: "
            },
            {
              "kind": "Reference",
              "text": "TroveCreationParams",
              "canonicalReference": "@liquity/lib-base!TroveCreationParams:type"
            },
            {
              "kind": "Content",
              "text": "<T>;\n} | {\n    type: \"closure\";\n    params: "
            },
            {
              "kind": "Reference",
              "text": "TroveClosureParams",
              "canonicalReference": "@liquity/lib-base!TroveClosureParams:type"
            },
            {
              "kind": "Content",
              "text": "<T>;\n} | {\n    type: \"adjustment\";\n    params: "
            },
            {
              "kind": "Reference",
              "text": "TroveAdjustmentParams",
              "canonicalReference": "@liquity/lib-base!TroveAdjustmentParams:type"
            },
            {
              "kind": "Content",
              "text": "<T>;\n    setToZero?: \"collateral\" | \"debt\";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "TroveChange",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 12
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@liquity/lib-base!TroveClosureDetails:interface",
          "docComment": "/**\n * Details of a {@link TransactableLiquity.closeTrove | closeTrove()} transaction.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TroveClosureDetails "
            }
          ],
          "releaseTag": "Public",
          "name": "TroveClosureDetails",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!TroveClosureDetails#params:member",
              "docComment": "/**\n * How much was withdrawn and repaid.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "params: "
                },
                {
                  "kind": "Reference",
                  "text": "TroveClosureParams",
                  "canonicalReference": "@liquity/lib-base!TroveClosureParams:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "params",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@liquity/lib-base!TroveClosureParams:type",
          "docComment": "/**\n * Parameters of a {@link TransactableLiquity.closeTrove | closeTrove()} transaction.\n *\n * @remarks\n *\n * The type parameter `T` specifies the allowed value type(s) of the particular `TroveClosureParams` object's properties.\n *\n * <h2>Properties</h2>\n *\n * <table>\n *\n * <tr> <th> Property </th> <th> Type </th> <th> Description </th> </tr>\n *\n * <tr> <td> withdrawCollateral </td> <td> T </td> <td> The amount of collateral that's withdrawn. </td> </tr>\n *\n * <tr> <td> repayLUSD? </td> <td> T </td> <td> <i>(Optional)</i> The amount of LUSD that's repaid. </td> </tr>\n *\n * </table>\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TroveClosureParams<T> = "
            },
            {
              "kind": "Reference",
              "text": "_CollateralWithdrawal",
              "canonicalReference": "@liquity/lib-base!_CollateralWithdrawal:type"
            },
            {
              "kind": "Content",
              "text": "<T> & "
            },
            {
              "kind": "Reference",
              "text": "_NoCollateralDeposit",
              "canonicalReference": "@liquity/lib-base!_NoCollateralDeposit:type"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "_LUSDRepayment",
              "canonicalReference": "@liquity/lib-base!_LUSDRepayment:type"
            },
            {
              "kind": "Content",
              "text": "<T>> & "
            },
            {
              "kind": "Reference",
              "text": "_NoLUSDBorrowing",
              "canonicalReference": "@liquity/lib-base!_NoLUSDBorrowing:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "TroveClosureParams",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@liquity/lib-base!TroveCreationDetails:interface",
          "docComment": "/**\n * Details of an {@link TransactableLiquity.openTrove | openTrove()} transaction.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TroveCreationDetails "
            }
          ],
          "releaseTag": "Public",
          "name": "TroveCreationDetails",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!TroveCreationDetails#fee:member",
              "docComment": "/**\n * Amount of LUSD added to the Trove's debt as borrowing fee.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fee: "
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "fee",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!TroveCreationDetails#newTrove:member",
              "docComment": "/**\n * The Trove that was created by the transaction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "newTrove: "
                },
                {
                  "kind": "Reference",
                  "text": "Trove",
                  "canonicalReference": "@liquity/lib-base!Trove:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "newTrove",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!TroveCreationDetails#params:member",
              "docComment": "/**\n * How much was deposited and borrowed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "params: "
                },
                {
                  "kind": "Reference",
                  "text": "TroveCreationParams",
                  "canonicalReference": "@liquity/lib-base!TroveCreationParams:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Decimal",
                  "canonicalReference": "@liquity/lib-base!Decimal:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "params",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@liquity/lib-base!TroveCreationError:type",
          "docComment": "/**\n * Describes why a Trove could not be created.\n *\n * @remarks\n *\n * See {@link TroveChange}.\n *\n * <h2>Possible values</h2>\n *\n * <table>\n *\n * <tr> <th> Value </th> <th> Reason </th> </tr>\n *\n * <tr> <td> \"missingLiquidationReserve\" </td> <td> A Trove's debt cannot be less than the liquidation reserve. </td> </tr>\n *\n * </table>\n *\n * More errors may be added in the future.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TroveCreationError = "
            },
            {
              "kind": "Content",
              "text": "\"missingLiquidationReserve\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "TroveCreationError",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@liquity/lib-base!TroveCreationParams:type",
          "docComment": "/**\n * Parameters of an {@link TransactableLiquity.openTrove | openTrove()} transaction.\n *\n * @remarks\n *\n * The type parameter `T` specifies the allowed value type(s) of the particular `TroveCreationParams` object's properties.\n *\n * <h2>Properties</h2>\n *\n * <table>\n *\n * <tr> <th> Property </th> <th> Type </th> <th> Description </th> </tr>\n *\n * <tr> <td> depositCollateral </td> <td> T </td> <td> The amount of collateral that's deposited. </td> </tr>\n *\n * <tr> <td> borrowLUSD </td> <td> T </td> <td> The amount of LUSD that's borrowed. </td> </tr>\n *\n * </table>\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TroveCreationParams<T = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "_CollateralDeposit",
              "canonicalReference": "@liquity/lib-base!_CollateralDeposit:type"
            },
            {
              "kind": "Content",
              "text": "<T> & "
            },
            {
              "kind": "Reference",
              "text": "_NoCollateralWithdrawal",
              "canonicalReference": "@liquity/lib-base!_NoCollateralWithdrawal:type"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "_LUSDBorrowing",
              "canonicalReference": "@liquity/lib-base!_LUSDBorrowing:type"
            },
            {
              "kind": "Content",
              "text": "<T> & "
            },
            {
              "kind": "Reference",
              "text": "_NoLUSDRepayment",
              "canonicalReference": "@liquity/lib-base!_NoLUSDRepayment:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "TroveCreationParams",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 10
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@liquity/lib-base!TroveListingParams:interface",
          "docComment": "/**\n * Parameters of the {@link ReadableLiquity.(getTroves:2) | getTroves()} function.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TroveListingParams "
            }
          ],
          "releaseTag": "Public",
          "name": "TroveListingParams",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!TroveListingParams#beforeRedistribution:member",
              "docComment": "/**\n * When set to `true`, the retrieved Troves won't include the liquidation shares received since the last time they were directly modified.\n *\n * @remarks\n *\n * Changes the type of returned Troves to {@link TroveWithPendingRedistribution}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly beforeRedistribution?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "beforeRedistribution",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!TroveListingParams#first:member",
              "docComment": "/**\n * Number of Troves to retrieve.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly first: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "first",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!TroveListingParams#sortedBy:member",
              "docComment": "/**\n * How the Troves should be sorted.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly sortedBy: "
                },
                {
                  "kind": "Content",
                  "text": "\"ascendingCollateralRatio\" | \"descendingCollateralRatio\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "sortedBy",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@liquity/lib-base!TroveListingParams#startingAt:member",
              "docComment": "/**\n * Index of the first Trove to retrieve from the sorted list.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly startingAt?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "startingAt",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@liquity/lib-base!TroveWithPendingRedistribution:class",
          "docComment": "/**\n * A Trove in its state after the last direct modification.\n *\n * @remarks\n *\n * The Trove may have received collateral and debt shares from liquidations since then. Use {@link TroveWithPendingRedistribution.applyRedistribution | applyRedistribution()} to calculate the Trove's most up-to-date state.\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `TroveWithPendingRedistribution` class.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TroveWithPendingRedistribution extends "
            },
            {
              "kind": "Reference",
              "text": "UserTrove",
              "canonicalReference": "@liquity/lib-base!UserTrove:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "TroveWithPendingRedistribution",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!TroveWithPendingRedistribution#applyRedistribution:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "applyRedistribution(totalRedistributed: "
                },
                {
                  "kind": "Reference",
                  "text": "Trove",
                  "canonicalReference": "@liquity/lib-base!Trove:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "UserTrove",
                  "canonicalReference": "@liquity/lib-base!UserTrove:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "totalRedistributed",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "applyRedistribution"
            },
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!TroveWithPendingRedistribution#equals:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "equals(that: "
                },
                {
                  "kind": "Reference",
                  "text": "TroveWithPendingRedistribution",
                  "canonicalReference": "@liquity/lib-base!TroveWithPendingRedistribution:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "that",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "equals"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@liquity/lib-base!UserTrove:class",
          "docComment": "/**\n * A Trove that is associated with a single owner.\n *\n * @remarks\n *\n * The SDK uses the base {@link Trove} class as a generic container of collateral and debt, for example to represent the {@link ReadableLiquity.getTotal | total collateral and debt} locked up in the protocol.\n *\n * The `UserTrove` class extends `Trove` with extra information that's only available for Troves that are associated with a single owner (such as the owner's address, or the Trove's status).\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `UserTrove` class.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class UserTrove extends "
            },
            {
              "kind": "Reference",
              "text": "Trove",
              "canonicalReference": "@liquity/lib-base!Trove:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "UserTrove",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@liquity/lib-base!UserTrove#equals:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "equals(that: "
                },
                {
                  "kind": "Reference",
                  "text": "UserTrove",
                  "canonicalReference": "@liquity/lib-base!UserTrove:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "that",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "equals"
            },
            {
              "kind": "Property",
              "canonicalReference": "@liquity/lib-base!UserTrove#ownerAddress:member",
              "docComment": "/**\n * Address that owns this Trove.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly ownerAddress: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "ownerAddress",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@liquity/lib-base!UserTrove#status:member",
              "docComment": "/**\n * Provides more information when the UserTrove is empty.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly status: "
                },
                {
                  "kind": "Reference",
                  "text": "UserTroveStatus",
                  "canonicalReference": "@liquity/lib-base!UserTroveStatus:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "status",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@liquity/lib-base!UserTroveStatus:type",
          "docComment": "/**\n * Represents whether a UserTrove is open or not, or why it was closed.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type UserTroveStatus = "
            },
            {
              "kind": "Content",
              "text": "\"nonExistent\" | \"open\" | \"closedByOwner\" | \"closedByLiquidation\" | \"closedByRedemption\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "UserTroveStatus",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        }
      ]
    }
  ]
}
